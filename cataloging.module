<?php

/**
 * @file
 *
 * Effectively a controller for the cataloging Drupal module.
 * 
 */

/**
 *
 * @return string 
 */
function cataloging_home($pid="74") {
    
    $institution_lat_long = cataloging_create_lat_long_array();
    $institution_drupalCodeTOinstitutionName = cataloging_create_drupalCode_institutionName_key();
    
    // hard coded array of possible projects. sorted by release date
    $projects = make_projects_array();

    // There are 2 REDCap API pulls, 1 to get project metadata (list of fields) and 1 to get data (submitted information). All field types except for text is pulled into data.
    // set up API
    require_once('RestCallRequest.php');
    $API_URL = "https://redcap.ctsacentral.org/api/";
    $token = $projects[$pid]['token'];

    // get metadata
    $metadata = get_REDCap_metadata($token);
    
//    // an array containing all the elements that must be submitted to the API
//    $parameters = array('content' => 'metadata', 'format' => 'json', 'token' => $token);
//    // create a new API request object
//    $request = RestCallRequest($API_URL, 'POST', $parameters);
//    // initiate the API request
//    $request->execute();
//    // resulting metadata
//    $metadata = json_decode($request->getResponseBody());
   
//        echo "<br>metadata: <br>";
//        print_r($metadata);  
    // create an array of all the fields to be included in the data pull (include all fields that are not text fields)
    // set up structure for compiled data to be returned:
    /*   Ex:   $compiledData = array('cru_site' => array('field_label' => 'Please select the name of the CTSA Institution with which this CRU is affiliated.', 
    *                                                   'choices' => json_encode(array(array('choice_label' => 'Albert Einstein College of Medicine',
    *                                                                                        'choice_value' =>  0,  //we will increment this for each response that chose this option
    *                                                                                        'color' => '#97192F' // the color to be used in the bar chart
    *                                                                                        ),
    *                                                                                  array('choice_label' => 'Albert Einstein College of Medicine',
    *                                                                                        'choice_value' =>  0,  //we will increment this for each response that chose this option
    *                                                                                        'color' => '#97192F' // the color to be used in the bar chart
    *                                                                                        ),
    *                                                                                        .
    *                                                                                        .
    *                                                                                        .
    *                                                                                   )
    *                                                                             )
    *                                                     ),
    *                              'cru_ctsa_fund' => etc...
    *                                );
    */
    $includeFieldList = array();
    $fieldTypesToExclude = array('notes');
    $fieldsToExclude = $projects[$pid]['fieldsToExclude'];
//    print_r($fieldsToExclude);
    foreach ($metadata as $field) {
     // don't include CTSA institution affiliation question
     if ($field->field_label != 'Please select the name of the CTSA Institution with which this CRU is affiliated.' && strtolower(trim($field->field_label)) != strtolower('Please select the name of your CTSA Institution.')) {
         // do not include field types we do not want
         if (!in_array($field->field_type, $fieldTypesToExclude) && !in_array($field->field_name,$fieldsToExclude)) {
             if ($field->field_type != "text" || ($field->field_type == 'text' && ($field->text_validation_type_or_show_slider_number == "integer" || $field->text_validation_type_or_show_slider_number == 'number'))) {
                 $type = $field->field_type == "text" ? "jitterplot" : "barchart";
                 if ($field->field_name == 'network_membership')
                     $type = 'barchart_pivot';
                 $compiledData[$field->field_name]['type'] = $type;
                 $fieldToType[$field->field_name] = $field->field_type;
                 $includeFieldList[] = $field->field_name;
                 $choicesList = explode("\n", $field->select_choices_or_calculations);
                 $compiledData[$field->field_name]['field_label'] = $field->field_label;
                 if ($field->field_type != "text") {
                     foreach ($choicesList as $rawValueAndLabel) {
                         $explode2 = explode(",", $rawValueAndLabel);
                         preg_match("/,.*/", $rawValueAndLabel, $match);
                         $compiledData[$field->field_name]['choices'][trim($explode2[0])]['choice_label'] = trim(preg_replace("/,/", "", $match[0], 1));
                         $compiledData[$field->field_name]['choices'][trim($explode2[0])]['choice_value'] = 0;
                         $compiledData[$field->field_name]['choices'][trim($explode2[0])]['color'] = "#9d1b32";
                     }
                 } else {
                     $compiledData[$field->field_name]['data'] = array();
                     $compiledData[$field->field_name]['field_note'] = $field->field_note;
                 }
             }
         }
     }

     // put together structure of shame factor array
     else {
         $choicesList = explode("\n", $field->select_choices_or_calculations);
         foreach ($choicesList as $rawValueAndLabel) {
             preg_match("/,.*/", $rawValueAndLabel, $match);
             $allInstitutions[trim(preg_replace("/,/", "", $match[0], 1))] = 0;
         }
     }
    }

    // shame factor - get list of all institutions that participated
    $fields = array($projects[$pid]['siteid']);
    // an array containing all the elements that must be submitted to the API
    $parameters = array('content' => 'record', 'type' => 'flat', 'format' => 'json', 'records' => array(), 'events' => array(),
     'fields' => $fields, 'forms' => array(), 'token' => $token, 'rawOrLabel' => 'label');
    // create a new API request object
    $request = new RestCallRequest($API_URL, 'POST', $parameters);
    // initiate the API request
    $request->execute();
    // resulting data    
    $jsondata = utf8_encode($request->getResponseBody());
    $participatingInstitutions = json_decode($jsondata);

    // count number of responses per institution
    foreach ($participatingInstitutions as $response) {
     $institutionName = $response->$fields[0];
     if (isset($allInstitutions[$institutionName]))
         $allInstitutions[$institutionName]++;
    //        else 
    //            print("Error!");
    }
//    print_r($allInstitutions);   

    // shame factor - get list of all institutions that did not participate
    $shameFactorArray = array();
    foreach ($allInstitutions as $institutionName => $count) {
     if ($count == 0)
         $shameFactorArray[] = $institutionName;  
     if($projects[$pid]['unit_exists'] == "")
         $institution_lat_long[$institutionName]['count'] = $count;
    }
//    print_r($institution_lat_long);
    
    
    
    
    //    print_r($shameFactorArray);
    // format shame factor string according to how many institutions did not participate
    $numberOfInstitutionsNotParticipating = count($shameFactorArray);
    $numberOfInstitutionsParticipating = count($allInstitutions) - $numberOfInstitutionsNotParticipating;
    $shameFactorString = " with exception of ";
    if ($numberOfInstitutionsNotParticipating > 1 && $numberOfInstitutionsParticipating >= 50) {
     foreach ($shameFactorArray as $institutionName) {
         $shameFactorString .= $institutionName == end($shameFactorArray) ? "and " . $institutionName : ($institutionName == $shameFactorArray[$numberOfInstitutionsNotParticipating - 2] ? $institutionName . " " : $institutionName . ", ");
     }
    } else if ($numberOfInstitutionsNotParticipating == 1)
     $shameFactorString .= $shameFactorArray[0];
    else
     $shameFactorString = "";

    $total_units = $projects[$pid]['unit_exists'] == "" ? count($participatingInstitutions) : 'to be calculated';

    $shameFactor = array('total_units' => $total_units, 'total_surveys' => count($participatingInstitutions), 'total_CTSA' => $numberOfInstitutionsParticipating, 'shame_factor_string' => $shameFactorString);
    

    // get data
    $records = array();
    $events = array();
    //    $fields = $includeFieldList;
    $fields = array();
    $forms = array();
    // an array containing all the elements that must be submitted to the API
    $parameters = array('content' => 'record', 'type' => 'flat', 'format' => 'json', 'records' => $records, 'events' => $events,
     'fields' => $fields, 'forms' => $forms, 'token' => $token);
    // create a new API request object
    $request = new RestCallRequest($API_URL, 'POST', $parameters);
    // initiate the API request
    $request->execute();
    // resulting data   
    $jsondata = utf8_encode($request->getResponseBody());
    $data = json_decode($jsondata);
//        echo "<br>data: <br>";
//        print_r($data);
    // get # of total units
    if ($shameFactor['total_units'] == "to be calculated") {
     $total_units = 0;
     foreach ($data as $row) {
         if ($row->$projects[$pid]['unit_exists'] == 1)
         {
             $total_units++;
             $institution_lat_long[$institution_drupalCodeTOinstitutionName[$row->$projects[$pid]['siteid']]]['count']++;
         }
     }
     $shameFactor['total_units'] = $total_units;
    }
    
    
    
    $amMapData = _cataloging_makemapxml($institution_lat_long, 'circle');

    //compile responses
    foreach ($data as $response) {
     foreach ($includeFieldList as $includeField) {
         if ($fieldToType[$includeField] == 'radio' || $fieldToType[$includeField] == 'dropdown') {
             if ($response->$includeField !== "" && isset($compiledData[$includeField]['choices'][$response->$includeField]['choice_label']))
                 $compiledData[$includeField]['choices'][$response->$includeField]['choice_value']++;
         }
         else if ($fieldToType[$includeField] == 'checkbox') {
             foreach ($compiledData[$includeField]['choices'] as $choice_raw => $choiceArray) {
                 $checkbox_field = $includeField . "___" . $choice_raw;
                 $compiledData[$includeField]['choices'][$choice_raw]['choice_value']+=$response->$checkbox_field;
             }
         } else if ($fieldToType[$includeField] == 'text') {
             if ($response->$includeField !== "" && is_numeric($response->$includeField)) {
                 if (!isset($boxPlotDataString[$includeField]))
                     $boxPlotDataString[$includeField] = "";
                 $boxPlotData[$includeField][] = $response->$includeField;
                 $boxPlotDataString[$includeField] .= $response->$includeField . ", ";
             }
         }
     }
    }

    // Handle box plot data - get five number summaries
    //    print("boxPlotData: ");
    //    print_r($boxPlotData);
    if (isset($boxPlotData)) {
     foreach ($boxPlotData as $field_name => $data) {
         //        print_r($data);
         foreach ($data as $value) {
             $data_array[] = array("x_value" => $value, "y_value" => rand(1, 10) . "." . rand(0, 9) - .5);
         }
         $compiledData[$field_name]['boxPlotData'] = json_encode(getFiveNumberSummary($data));
         $compiledData[$field_name]['data'] = json_encode($data_array);
         unset($data_array);
     }
    }


    //json encode
    foreach ($compiledData as $key => $field) {
     if (isset($compiledData[$key]['choices']))
         $compiledData[$key]['choices'] = json_encode(array_values($field['choices']));
    }
    //    print("compiled data: <br>");
    //    print_r($compiledData);
    $ret_val = theme('cataloging_home', array(
     'data' => $compiledData,
     'title' => $projects[$pid]['title'],
     'description' => $projects[$pid]['description'],
     'shameFactor' => $shameFactor,
     // Passing siteId 0 because we simply want a list of resources. Don't care about site
     'resources' => cataloging_redcap_getlistofresources(0),
     'pid' => $pid,
     'amMapData' => $amMapData,
     'defaultQuestionToDisplay' => $projects[$pid]['defaultQuestionToDisplay']
    ));

    return $ret_val;
    
//    $ret_val = theme('cataloging_home', array('data' => $data));
//
//    return $ret_val;
}

/**
 * Callback function to display cataloging for authenticated users
 *
 * @return string
 */
function cataloging_private($override_siteid = '', $override_isadmin = '', $securityCode = '') {
    
    // Users must be authenticated to view private
    // Note that we can't put this in an _access callback hook because it would
    // effectively force everyone to login on every page of the site.
    if(!isset($_SESSION) || !array_key_exists('eppn', $_SESSION) || !count($_SESSION['eppn'])) {
        redirectToLogin();
    }
    
    // Data package will be accessible by $data in cataloging-private.tpl.php
    $data = array(
        'isadmin' => 0,
        'resources' => array(),
        'isSuperUser' => 0,
        'ctsaInstitutionList' => array(),
        'siteId' => 0
    );

    // SUPER users
    $superUsers = array(
        'jana.shirey@vanderbilt.edu', 
        'anneliese.moosman@vanderbilt.edu', 
        'jonathan.swafford@vanderbilt.edu', 
        'paul.a.harris@vanderbilt.edu', 
        'terri.edwards@vanderbilt.edu'
    );
    
    // if SUPER user, create institution drop down
    if (in_array(strtolower($_SESSION['eppn']), $superUsers)) {
        $data['isSuperUser'] = 1;
        if ($override_siteid == '') {
            $override_siteid = 47;
            $override_isadmin = 1;
        }
        
        
        // create drupal code => institution name key
        $allInstitutions = cataloging_create_drupalCode_institutionName_key();
        
    } else {
        $data['isSuperUser'] = 0;
    }

    
    $personId = 0;
    if(count($_SESSION['eppn_data'])) {
        // eppn_data is created during the shibboleth login. See shibboleth.module file, shibboleth_get_user function
        $personId = $_SESSION['eppn_data']['person_id'];
    }
    else
    {
        $full_url = url($_GET['q'], array('absolute' => TRUE));
        preg_match('/localhost/', $full_url, $matches);
        if(isset($matches[0]) && $matches[0]!='')
        {
            $personId = 6537;
        }
    }

    // Determine if the logged-in user is a CTSA-administrator/liaison or not. Get site of logged-in user
    $result = db_query("SELECT role_site_admin___1 AS isadmin, role_liaison___1 AS isliaison, inst_ctsa_id AS siteid
                          FROM {redcap_persons} p
                          WHERE p.person_id = $personId");
    

    $row = $result->fetchAssoc();
    
    // give editing rights if user is admin or liaison
    if (is_array($row) && ((array_key_exists('isadmin', $row) && $row['isadmin'])||(array_key_exists('isliaison', $row) && $row['isliaison']))) {
        $data['isadmin'] = 1;
    }
    $siteId = $row['siteid'];

    if ((strlen($securityCode) && $securityCode == "nEp30Zz") || in_array(strtolower($_SESSION['eppn']), $superUsers)) {
        if (strlen($override_siteid)) {
            $siteId = $override_siteid;
        }
        if (strlen($override_isadmin)) {
            $data['isadmin'] = $override_isadmin;
        }
    }

    $data['ctsaInstitutionsList'] = (isset($allInstitutions)) ? $allInstitutions : array();
    $data['siteid'] = $siteId;
    $data['resources'] = cataloging_redcap_getlistofresources($siteId);
    $ret_val = theme('cataloging_private', array('data' => $data));

    return $ret_val;
}

function cataloging_filtering()
{
    drupal_add_library('system', 'ui.accordion');
    drupal_add_js('jQuery(document).ready(function(){jQuery("#accordion").accordion({collapsible:true,active: false});});', 'inline');

    $ret_val = theme('cataloging_filtering', array('data' => array(1,2,3)));

    return $ret_val;
}
function cataloging_filtering_ajax($externalProjectsOnly=false,$selectedProjects='',$checkedFilters='')
{
    $checkedFilters = str_replace(array('my_forward_slash'), array('/'), $checkedFilters);
    $lat_long = cataloging_create_lat_long_array();
    if($selectedProjects=='')
    {
        print 0;
        cataloging_filtering_makemapxml($lat_long,'circle');
        exit();
    }
    $selectedProjects = explode(",",$selectedProjects);
    
    $projectsArray = make_projects_array();
    $filters = cataloging_createFilters($projectsArray);
//    print_r($filters);
    $baseWHERE = array();
    foreach($selectedProjects as $pid)
    {
        
        $project = $projectsArray[$pid];
        $baseWHERE[$pid] = "1";
        if($project['unit_exists']!='')
        {
            $unit_exists = $project['unit_exists'];
            $baseWHERE[$pid].=" AND `$unit_exists` = 1 ";
        }
        if($externalProjectsOnly=='true')
        {
            if(isset($filters[$pid]['filters']['External projects accepted']))
                $baseWHERE[$pid].=" AND (".$filters[$pid]['filters']['External projects accepted'].")";
        }
//        print_r($baseWHERE);
    }
    $WHERE = $baseWHERE;
//    print_r($baseWHERE);
//    print_r($checkedFilters);

    
    if($checkedFilters!='')
    {
        $checkedFilters = explode(",",$checkedFilters);
        $checkedFilters = str_replace('my_comma', ',', $checkedFilters);
        
        foreach($checkedFilters as $pid__checkBoxName)
        {
            $pidAndcheckBoxName = explode("__",$pid__checkBoxName);
//            print_r($pidAndcheckBoxName);
            $pid = $pidAndcheckBoxName[0];
            $checkBoxName = $pidAndcheckBoxName[1];
//            print($checkBoxName."<br>");
            $key = htmlentities(str_replace("_"," ",$checkBoxName));
//            print($key."<br>");
            $WHERE[$pid].= " AND (".$filters[$pid]['filters'][$key].")";
        }
    }
//    print_r($WHERE);
    $matchingInstitutions = array();
    $i = 0;
    
    foreach($lat_long as $inst_name => $array)
        $drupalToInst[$array['code']] = $inst_name;
    foreach($WHERE as $pid => $where)
    {
        $project = $projectsArray[$pid];
        $table = "cataloging_".$pid;
        $institution_field = $projectsArray[$pid]['siteid'];
        $sql = "SELECT DISTINCT $institution_field as institution, COUNT($institution_field) as 'count'
                FROM $table WHERE ".$where." 
                GROUP BY $institution_field";
//            print("<br>".$sql."<br>");
//        $result = mysql_query($sql);
//        if (!$result) {
//            die('<br>Invalid DISTINCT query: ' . mysql_error());
//        } 
        $result=  db_query($sql);

//        while($row = mysql_fetch_row($result)) {
        while($row=$result->fetchAssoc()) {
            $matchingInstitutions[$i][] = $drupalToInst[$row['institution']];
        }
        
        // if sql returned no results, return count of 0 matching institutions
        if(!isset($matchingInstitutions[$i]))
        {
            cataloging_filtering_makemapxml($lat_long,'circle');
            print(0);
            exit();
        }
        $i++;
    }
    
//    print_r($matchingInstitutions);
    
//    print("lat_long: ");
//    print_r($lat_long);
    
    


    $intersection = array();
    foreach($matchingInstitutions as $key => $array)
    {
        if($key>0)
            $intersection = array_intersect($intersection, $array);
        else
            $intersection = $array;
    }
    
    foreach($intersection as $institution)
    {
//        print_r($lat_long[$institution]);
        $lat_long[$institution]['count']=1;
        $lat_long[$institution]['description'] = "Hello World!";
    }
    cataloging_filtering_makemapxml($lat_long,'circle');
//    print_r($lat_long);

    print(count($intersection));

    exit();
}

/**
 * Takes an array of datapoints and returns an XML string suitable for an amMap (http://www.ammap.com/docs/v.2/data/structure)
 * 
 * @param array $data
 * @param string $marker 'circle' OR 'target'
 * @return string
 */
function _cataloging_makemapxml($data, $marker) {
    $ret_val = '<map map_file="maps/usa_mercator.swf" tl_long="-178.244751" tl_lat="71.455555" br_long="-66.936676" br_lat="18.96519" zoom="214%" zoom_x="-96%" zoom_y="-108%">
    <areas>
    <!-- USA - States - Mercator Projection - Set projection in settings file -->
    <area mc_name="US_AL" title="Alabama"></area>
    <area mc_name="US_AK" title="Alaska"></area>
    <area mc_name="US_AZ" title="Arizona"></area>
    <area mc_name="US_AR" title="Arkansas"></area>
    <area mc_name="US_CA" title="California"></area>
    <area mc_name="US_CO" title="Colorado"></area>
    <area mc_name="US_CT" title="Connecticut"></area>
    <area mc_name="US_DE" title="Delaware"></area>
    <area mc_name="US_DC" title="District of Columbia"></area>
    <area mc_name="US_FL" title="Florida"></area>
    <area mc_name="US_GA" title="Georgia"></area>
    <area mc_name="US_HI" title="Hawaii"></area>
    <area mc_name="US_ID" title="Idaho"></area>
    <area mc_name="US_IL" title="Illinois"></area>
    <area mc_name="US_IN" title="Indiana"></area>
    <area mc_name="US_IA" title="Iowa"></area>
    <area mc_name="US_KS" title="Kansas"></area>
    <area mc_name="US_KY" title="Kentucky"></area>
    <area mc_name="US_LA" title="Louisiana"></area>
    <area mc_name="US_ME" title="Maine"></area>
    <area mc_name="US_MD" title="Maryland"></area>
    <area mc_name="US_MA" title="Massachusetts"></area>
    <area mc_name="US_MI" title="Michigan"></area>
    <area mc_name="US_MN" title="Minnesota"></area>
    <area mc_name="US_MS" title="Mississippi"></area>
    <area mc_name="US_MO" title="Missouri"></area>
    <area mc_name="US_MT" title="Montana"></area>
    <area mc_name="US_NE" title="Nebraska"></area>
    <area mc_name="US_NV" title="Nevada"></area>
    <area mc_name="US_NH" title="New Hampshire"></area>
    <area mc_name="US_NJ" title="New Jersey"></area>
    <area mc_name="US_NM" title="New Mexico"></area>
    <area mc_name="US_NY" title="New York"></area>
    <area mc_name="US_NC" title="North Carolina"></area>
    <area mc_name="US_ND" title="North Dakota"></area>
    <area mc_name="US_OH" title="Ohio"></area>
    <area mc_name="US_OK" title="Oklahoma"></area>
    <area mc_name="US_OR" title="Oregon"></area>
    <area mc_name="US_PA" title="Pennsylvania"></area>
    <area mc_name="US_RI" title="Rhode Island"></area>
    <area mc_name="US_SC" title="South Carolina"></area>
    <area mc_name="US_SD" title="South Dakota"></area>
    <area mc_name="US_TN" title="Tennessee"></area>
    <area mc_name="US_TX" title="Texas"></area>
    <area mc_name="US_UT" title="Utah"></area>
    <area mc_name="US_VT" title="Vermont"></area>
    <area mc_name="US_VA" title="Virginia"></area>
    <area mc_name="US_WA" title="Washington"></area>
    <area mc_name="US_WV" title="West Virginia"></area>
    <area mc_name="US_WI" title="Wisconsin"></area>
    <area mc_name="US_WY" title="Wyoming"></area>
    <area mc_name="borders" color="#FFFFFF" balloon="false"></area>
    </areas>
    <movies>';

    // Each $data point should look similar to:
    // array(7) { 
    //    ["title"]=> string(66) "University of New Mexico Clinical and Translational Science Center" 
    //    ["lat"]=> string(8) "35.08763" 
    //    ["long"]=> string(10) "-106.61799" 
    //    ["count"]=> string(1) "1"
    // }



    // Finally write values. Only include values that have a count >0.
    foreach($data as $point) {
        if($point['count'] != 0) {
            $color = '434748';
            $alpha = '100';
            $ret_val .= '<movie file="' . $marker . '" color="' . $color . '" color_hover="9d1b32" title="' . $point['title'] . '" lat="' . $point['lat'] . '" long="' . $point['long'] . '" width="8" height="8" value="' . $point['count'] . '" fixed_size="true"></movie>' . "\n";
        }
    
    }

    $ret_val .= '</movies></map>';

    
    $wd = getcwd();
    
    
    
    $myFile = "$wd/sites/all/modules/ctsa/cataloging/js/ammap/ammap_data_concept.xml";
    $fh = fopen($myFile,'w');
    fwrite($fh, trim($ret_val));
    fclose($fh);
    
    return str_replace(array("\n", "\r"), '', trim($ret_val));
}

/**
 * Create an array of the latitude and longitude of each institution
 * 
 */
function cataloging_create_lat_long_array() {
    $institution_lat_long = array(
        'Albert Einstein College of Medicine'=>array('title'=>'Albert Einstein College of Medicine','code'=>62,'lat'=>40.8533118,'long'=>-73.845582,'count'=>0),
        'Boston University'=>array('title'=>'Boston University','code'=>63,'lat'=>42.3495657,'long'=>-71.1047446,'count'=>0),
        'Case Western Reserve University'=>array('title'=>'Case Western Reserve University','code'=>51,'lat'=>41.50525,'long'=>-81.61014,'count'=>0),
        'Columbia University'=>array('title'=>'Columbia University','code'=>1,'lat'=>40.808224,'long'=>-73.961889,'count'=>0),
        'Duke University'=>array('title'=>'Duke University','code'=>2,'lat'=>36.0079,'long'=>-78.926566,'count'=>0),
        'Emory University'=>array('title'=>'Emory University','code'=>56,'lat'=>33.79238,'long'=>-84.32109,'count'=>0),
        "Children's National Medical Center"=>array('title'=>"Children's National Medical Center",'code'=>94,'lat'=>38.899176,'long'=>-77.047092,'count'=>0),
        'Georgetown University Medical Center'=>array('title'=>'Georgetown University Medical Center','code'=>95,'lat'=>38.898202,'long'=>-77.012191,'count'=>0),
        'Harvard University'=>array('title'=>'Harvard University','code'=>64,'lat'=>42.377723,'long'=>-71.116629,'count'=>0),
        'Indiana University School of Medicine'=>array('title'=>'Indiana University School of Medicine','code'=>65,'lat'=>39.780948,'long'=>-86.16634,'count'=>0),
        'Johns Hopkins University'=>array('title'=>'Johns Hopkins University','code'=>55,'lat'=>39.2975944,'long'=>-76.5907918,'count'=>0),
        'Mayo Clinic'=>array('title'=>'Mayo Clinic','code'=>3,'lat'=>44.02137,'long'=>-92.48193,'count'=>0),
        'Medical College of Wisconsin'=>array('title'=>'Medical College of Wisconsin','code'=>96,'lat'=>43.043584,'long'=>-88.033859,'count'=>0),
        'Mount Sinai School of Medicine'=>array('title'=>'Mount Sinai School of Medicine','code'=>80,'lat'=>40.790414,'long'=>-73.953833,'count'=>0),
        'Northwestern University'=>array('title'=>'Northwestern University','code'=>66,'lat'=>41.89493,'long'=>-87.62157,'count'=>0),
        'New York University School of Medicine'=>array('title'=>'New York University School of Medicine','code'=>81,'lat'=>40.727256,'long'=>-73.995227,'count'=>0),
        'The Ohio State University'=>array('title'=>'The Ohio State University','code'=>67,'lat'=>39.996838,'long'=>-83.007514,'count'=>0),
        'Oregon Health & Science University'=>array('title'=>'Oregon Health & Science University','code'=>4,'lat'=>45.49999,'long'=>-122.68496,'count'=>0),
        'Penn State Milton S. Hershey Medical Center'=>array('title'=>'Penn State Milton S. Hershey Medical Center','code'=>127,'lat'=>40.285924,'long'=>-76.650247,'count'=>0),
        'The Rockefeller University'=>array('title'=>'The Rockefeller University','code'=>5,'lat'=>40.76324,'long'=>-73.95683,'count'=>0),
        'The Scripps Research Institute'=>array('title'=>'The Scripps Research Institute','code'=>68,'lat'=>32.8936629,'long'=>-117.242536,'count'=>0),
        'Stanford University'=>array('title'=>'Stanford University','code'=>69,'lat'=>37.429662,'long'=>-122.172914,'count'=>0),
        'Tufts University'=>array('title'=>'Tufts University','code'=>70,'lat'=>42.3486,'long'=>-71.0645,'count'=>0),
        'The University of Alabama at Birmingham'=>array('title'=>'The University of Alabama at Birmingham','code'=>71,'lat'=>33.501399,'long'=>-86.807327,'count'=>0),
        'University of Arkansas for Medical Sciences'=>array('title'=>'University of Arkansas for Medical Sciences','code'=>82,'lat'=>34.7515731,'long'=>-92.320972,'count'=>0),
        'University of California, Davis'=>array('title'=>'University of California, Davis','code'=>6,'lat'=>38.539852,'long'=>-121.752112,'count'=>0),
        'University of California, Los Angeles'=>array('title'=>'University of California, Los Angeles','code'=>126,'lat'=>34.068762,'long'=>-118.444941,'count'=>0),
        'University of California, San Diego'=>array('title'=>'University of California, San Diego','code'=>100,'lat'=>32.744276,'long'=>-117.184436,'count'=>0),
        'University of California, San Francisco'=>array('title'=>'University of California, San Francisco','code'=>7,'lat'=>37.7633194,'long'=>-122.4585389,'count'=>0),
        'University of Chicago'=>array('title'=>'University of Chicago','code'=>54,'lat'=>41.789427,'long'=>-87.597742,'count'=>0),
        'University of Cincinnati'=>array('title'=>'University of Cincinnati','code'=>77,'lat'=>39.14066,'long'=>-84.50034,'count'=>0),
        'University of Colorado Denver'=>array('title'=>'University of Colorado Denver','code'=>72,'lat'=>39.746976,'long'=>-104.99935,'count'=>0),
        'University of Florida'=>array('title'=>'University of Florida','code'=>83,'lat'=>29.6435064,'long'=>-82.3506142,'count'=>0),
        'University of Illinois at Chicago'=>array('title'=>'University of Illinois at Chicago','code'=>84,'lat'=>41.869097,'long'=>-87.671741,'count'=>0),
        'University of Iowa'=>array('title'=>'University of Iowa','code'=>48,'lat'=>41.662921,'long'=>-91.562035,'count'=>0),
        'University of Kansas Medical Center'=>array('title'=>'University of Kansas Medical Center','code'=>119,'lat'=>38.899144,'long'=>-94.725489,'count'=>0),
        'University of Kentucky'=>array('title'=>'University of Kentucky','code'=>122,'lat'=>38.027188,'long'=>-84.503975,'count'=>0),
        'University of Massachusetts Medical School, Worcester'=>array('title'=>'University of Massachusetts Medical School, Worcester','code'=>101,'lat'=>42.277658,'long'=>-71.759259,'count'=>0),
        'University of Miami'=>array('title'=>'University of Miami','code'=>128,'lat'=>25.7173947,'long'=>-80.2781262,'count'=>0),
        'University of Michigan'=>array('title'=>'University of Michigan','code'=>50,'lat'=>42.2683219,'long'=>-83.7362956,'count'=>0),
        'University of Minnesota Twin Cities'=>array('title'=>'University of Minnesota Twin Cities','code'=>121,'lat'=>44.97571,'long'=>-93.23644,'count'=>0),
        'University of New Mexico Health Sciences Center'=>array('title'=>'University of New Mexico Health Sciences Center','code'=>102,'lat'=>35.08763,'long'=>-106.61799,'count'=>0),
        'The University of North Carolina at Chapel Hill'=>array('title'=>'The University of North Carolina at Chapel Hill','code'=>76,'lat'=>35.898,'long'=>-79.036,'count'=>0),
        'University of Pennsylvania'=>array('title'=>'University of Pennsylvania','code'=>8,'lat'=>39.948896,'long'=>-75.189687,'count'=>0),
        'University of Pittsburgh'=>array('title'=>'University of Pittsburgh','code'=>9,'lat'=>40.43065,'long'=>-79.95992,'count'=>0),
        'University of Rochester School of Medicine and Dentistry'=>array('title'=>'University of Rochester School of Medicine and Dentistry','code'=>11,'lat'=>43.1113889,'long'=>-77.6336111,'count'=>0),
        'Medical University of South Carolina'=>array('title'=>'Medical University of South Carolina','code'=>79,'lat'=>32.7838,'long'=>-79.9473,'count'=>0),
        'University of Southern California'=>array('title'=>'University of Southern California','code'=>103,'lat'=>34.023347,'long'=>-118.283816,'count'=>0),
        'University of Texas Southwestern Medical Center at Dallas'=>array('title'=>'University of Texas Southwestern Medical Center at Dallas','code'=>49,'lat'=>32.81615,'long'=>-96.845302,'count'=>0),
        'University of Texas Health Science Center at Houston'=>array('title'=>'University of Texas Health Science Center at Houston','code'=>12,'lat'=>29.731896,'long'=>-95.384105,'count'=>0),
        'University of Texas Medical Branch'=>array('title'=>'University of Texas Medical Branch','code'=>85,'lat'=>29.310883,'long'=>-94.777993,'count'=>0),
        'The University of Texas Health Science Center at San Antonio'=>array('title'=>'The University of Texas Health Science Center at San Antonio','code'=>74,'lat'=>29.580745,'long'=>-98.624314,'count'=>0),
        'The University of Utah'=>array('title'=>'The University of Utah','code'=>75,'lat'=>40.765222,'long'=>-111.844252,'count'=>0),
        'University of Washington'=>array('title'=>'University of Washington','code'=>58,'lat'=>47.658345,'long'=>-122.303017,'count'=>0),
        'University of Wisconsin - Madison'=>array('title'=>'University of Wisconsin - Madison','code'=>57,'lat'=>43.07526791,'long'=>-89.40801501,'count'=>0),
        'University of California, Irvine'=>array('title'=>'University of California, Irvine','code'=>97,'lat'=>33.649455,'long'=>-117.845796,'count'=>0),
        'Vanderbilt University'=>array('title'=>'Vanderbilt University','code'=>47,'lat'=>36.14269,'long'=>-86.80128,'count'=>0),
        'Virginia Commonwealth University'=>array('title'=>'Virginia Commonwealth University','code'=>104,'lat'=>37.540778,'long'=>-77.433928,'count'=>0),
        'Washington University'=>array('title'=>'Washington University','code'=>52,'lat'=>38.660269,'long'=>-90.57954,'count'=>0),
        'Weill Cornell Medical College'=>array('title'=>'Weill Cornell Medical College','code'=>53,'lat'=>40.77,'long'=>-73.96,'count'=>0),
        'Yale University'=>array('title'=>'Yale University','code'=>13,'lat'=>41.30573,'long'=>-72.93229,'count'=>0)
        );
    
//    while($row = $result->fetchObject()) {
//        $institution_lat_long[$row->institution] = array(
//            'title' => $row->institution,
//            'lat' => $row->latitude,
//            'long' => $row->longitude,
//            'count' => 0,
//            'hasnodata' => true
//        );
//    }

    return $institution_lat_long;
}

/**
 * Display visualizations for a resource (Clinical Research Unit, Pilot Funding Program, etc...).  See cataloging_menu()
 * 
 * @return string 
 */
function cataloging_resource($pid) {
    
    // Users must be authenticated to view all visualizations for a resource/survey
    // Note that we can't put this in an _access callback hook because it would
    // effectively force everyone to login on every page of the site.
    if(!isset($_SESSION) || !array_key_exists('eppn', $_SESSION) || !count($_SESSION['eppn'])) {
        redirectToLogin();
    }

    // hard coded array of possible projects. sorted by release date
    $projects = make_projects_array();

    // There are 2 REDCap API pulls, 1 to get project metadata (list of fields) and 1 to get data (submitted information). All field types except for text is pulled into data.
    // set up API
    require_once('RestCallRequest.php');
    $API_URL = "https://redcap.ctsacentral.org/api/";
    $token = $projects[$pid]['token'];

    // get metadata
    $metadata = get_REDCap_metadata($token);
//    echo "<br>metadata: <br>";
//    print_r($metadata);  
    if($metadata=="")
        print("<br>Error! Metadata not set!<br>");

    // create an array of all the fields to be included in the data pull (include all fields that are not text fields)
    // set up structure for compiled data to be returned:
    /*   Ex:   $compiledData = array('cru_site' => array('field_label' => 'Please select the name of the CTSA Institution with which this CRU is affiliated.', 
     *                                                   'choices' => json_encode(array(array('choice_label' => 'Albert Einstein College of Medicine',
     *                                                                                        'choice_value' =>  0,  //we will increment this for each response that chose this option
     *                                                                                        'color' => '#97192F' // the color to be used in the bar chart
     *                                                                                        ),
     *                                                                                  array('choice_label' => 'Albert Einstein College of Medicine',
     *                                                                                        'choice_value' =>  0,  //we will increment this for each response that chose this option
     *                                                                                        'color' => '#97192F' // the color to be used in the bar chart
     *                                                                                        ),
     *                                                                                        .
     *                                                                                        .
     *                                                                                        .
     *                                                                                   )
     *                                                                             )
     *                                                     ),
     *                              'cru_ctsa_fund' => etc...
     *                                );
     */
    $includeFieldList = array();
    $fieldsToExclude = $projects[$pid]['fieldsToExclude'];
//    print_r($fieldsToExclude);
    $fieldTypesToExclude = array('notes');
    foreach ($metadata as $field) {
        // don't include CTSA institution affiliation question
        if ($field->field_label != 'Please select the name of the CTSA Institution with which this CRU is affiliated.' && strtolower(trim($field->field_label)) != strtolower('Please select the name of your CTSA Institution.') && $field->field_name != "ctsa_institution") {
            // do not include field types we do not want
            if (!in_array($field->field_type, $fieldTypesToExclude) && !in_array($field->field_name,$fieldsToExclude)) {
                if ($field->field_type != "text" || ($field->field_type == 'text' && ($field->text_validation_type_or_show_slider_number == "integer" || $field->text_validation_type_or_show_slider_number == 'number'))) {
                    $type = $field->field_type == "text" ? "jitterplot" : "barchart";
                    if ($field->field_name == 'network_membership')
                        $type = 'barchart_pivot';
                    $compiledData[$field->field_name]['type'] = $type;
                    $fieldToType[$field->field_name] = $field->field_type;
                    $includeFieldList[] = $field->field_name;
                    $choicesList = explode("\n", $field->select_choices_or_calculations);
                    $compiledData[$field->field_name]['field_label'] = $field->field_label;
                    if ($field->field_type != "text") {
                        foreach ($choicesList as $rawValueAndLabel) {
                            $explode2 = explode(",", $rawValueAndLabel);
                            preg_match("/,.*/", $rawValueAndLabel, $match);
                            $compiledData[$field->field_name]['choices'][trim($explode2[0])]['choice_label'] = trim(preg_replace("/,/", "", $match[0], 1));
                            $compiledData[$field->field_name]['choices'][trim($explode2[0])]['choice_value'] = 0;
                            $compiledData[$field->field_name]['choices'][trim($explode2[0])]['color'] = "#9d1b32";
                        }
                    } else {
                        $compiledData[$field->field_name]['data'] = array();
                        $compiledData[$field->field_name]['field_note'] = $field->field_note;
                    }
                }
            }
        }
        // put together structure of shame factor array
        else{
            $choicesList = explode("\n", $field->select_choices_or_calculations);
            foreach ($choicesList as $rawValueAndLabel) {
                preg_match("/,.*/", $rawValueAndLabel, $match);
                $allInstitutions[trim(preg_replace("/,/", "", $match[0], 1))] = 0;
            }
        }
    }

    // shame factor - get list of all institutions that participated
    
    $fields = array($projects[$pid]['siteid']);
//    $participatingInstitutions = get_REDCap_data($token,$fields,'label');
    
    
    // an array containing all the elements that must be submitted to the API
    $parameters = array('content' => 'record', 'type' => 'flat', 'format' => 'json', 'records' => array(), 'events' => array(),
        'fields' => $fields, 'forms' => array(), 'token' => $token, 'rawOrLabel' => 'label');
    // create a new API request object
    $request = new RestCallRequest($API_URL, 'POST', $parameters);
    // initiate the API request
    $request->execute();
    // resulting data     
    $participatingInstitutions = json_decode(utf8_encode($request->getResponseBody()));

//    echo "<br>participating institutions: <br>";
//    print_r($participatingInstitutions);

    // count number of responses per institution
    foreach ($participatingInstitutions as $response) {
        $institutionName = $response->$fields[0];
        if (isset($allInstitutions[$institutionName]))
            $allInstitutions[$institutionName]++;
//        else 
//            print("Error!");
    }
//    echo "<br>all institutions: <br>";
//    print_r($allInstitutions);

    // shame factor - get list of all institutions that did not participate
    $shameFactorArray = array();
    foreach ($allInstitutions as $institutionName => $count) {
        if ($count == 0)
            $shameFactorArray[] = $institutionName;
    }
//    echo "<br>shameFactorArray: <br>";
//    print_r($shameFactorArray);
    
    // format shame factor string according to how many institutions did not participate
    $numberOfInstitutionsNotParticipating = count($shameFactorArray);
    $numberOfInstitutionsParticipating = count($allInstitutions) - $numberOfInstitutionsNotParticipating;
    $shameFactorString = " with exception of ";
    if ($numberOfInstitutionsNotParticipating > 1 && $numberOfInstitutionsParticipating >= 50) {
        foreach ($shameFactorArray as $institutionName) {
            $shameFactorString .= $institutionName == end($shameFactorArray) ? "and " . $institutionName : ($institutionName == $shameFactorArray[$numberOfInstitutionsNotParticipating - 2] ? $institutionName . " " : $institutionName . ", ");
        }
    } else if ($numberOfInstitutionsNotParticipating == 1)
        $shameFactorString .= $shameFactorArray[0];
    else
        $shameFactorString = "";
    
    

    // get data
    $records = array();
    $events = array();
    $fields = array();
    $forms = array();
    // an array containing all the elements that must be submitted to the API
    $parameters = array('content' => 'record', 'type' => 'flat', 'format' => 'json', 'records' => $records, 'events' => $events,
        'fields' => $fields, 'forms' => $forms, 'token' => $token);
    // create a new API request object
    $request = new RestCallRequest($API_URL, 'POST', $parameters);
    // initiate the API request
    $request->execute();
    // resulting data     
    $jsondata = utf8_encode($request->getResponseBody());
//    echo "<pre>";
//    print_r($jsondata);
    $data = json_decode($jsondata);
//    echo "<pre>";
//    print_r($data);
//    echo "<br>request: <br>";
//    print_r($request);
//    echo "<br>response body: <br>";
//    print_r($request->getResponseBody());
//    echo "<br>data: <br>";
//    print_r($data);

    
    // The total number of units will not necessarily be the same as the total number of surveys.
    // For some assets, there is a question asking if the asset exists at that institution ("unit_exists"). If this question exists, total 
    // number of units is the total number of responses that selected "Yes" (="1"). 
    $shameFactor = array('total_units' => 0, 'total_surveys' => count($participatingInstitutions), 'total_CTSA' => $numberOfInstitutionsParticipating, 'shame_factor_string' => $shameFactorString);

    // get # of total units
    if($projects[$pid]['unit_exists'] != "") {
        $total_units = 0;
        foreach ($data as $row) {
            if ($row->$projects[$pid]['unit_exists'] == 1)
                $total_units++;
        }
        $shameFactor['total_units'] = $total_units;
    }
    else
        $shameFactor['total_units'] = count($participatingInstitutions);
    
//    print("<br>shameFactor:<br> ");
//    print_r($shameFactor);
    

    //compile responses
    foreach ($data as $response) {
        foreach ($includeFieldList as $includeField) {
            if ($fieldToType[$includeField] == 'radio' || $fieldToType[$includeField] == 'dropdown') {
                if ($response->$includeField !== "" && isset($compiledData[$includeField]['choices'][$response->$includeField]['choice_label']))
                    $compiledData[$includeField]['choices'][$response->$includeField]['choice_value']++;
            }
            else if ($fieldToType[$includeField] == 'checkbox') {
                foreach ($compiledData[$includeField]['choices'] as $choice_raw => $choiceArray) {
                    $checkbox_field = $includeField . "___" . $choice_raw;
                    $compiledData[$includeField]['choices'][$choice_raw]['choice_value']+=$response->$checkbox_field;
                }
            } else if ($fieldToType[$includeField] == 'text') {
                if ($response->$includeField !== "" && is_numeric($response->$includeField)) {
                    if (!isset($boxPlotDataString[$includeField]))
                        $boxPlotDataString[$includeField] = "";
                    $boxPlotData[$includeField][] = $response->$includeField;
                    $boxPlotDataString[$includeField] .= $response->$includeField . ", ";
                }
            }
        }
    }


    // Handle box plot data - get five number summaries
//    print("boxPlotData: ");
//    print_r($boxPlotData);
    if (isset($boxPlotData)) {
        foreach ($boxPlotData as $field_name => $data) {
            //        print_r($data);
            foreach ($data as $value) {
                $data_array[] = array("x_value" => $value, "y_value" => rand(1, 10) . "." . rand(0, 9) - .5);
            }
            $compiledData[$field_name]['boxPlotData'] = json_encode(getFiveNumberSummary($data));
            $compiledData[$field_name]['data'] = json_encode($data_array);
            unset($data_array);
        }
    }


    //json encode
    foreach ($compiledData as $key => $field) {
        if (isset($compiledData[$key]['choices']))
            $compiledData[$key]['choices'] = json_encode(array_values($field['choices']));
    }
    
    
    $ret_val = theme('cataloging_resource', array(
        'data' => $compiledData,
        'title' => $projects[$pid]['title'],
        'description' => $projects[$pid]['description'],
        'shameFactor' => $shameFactor,
        // Passing siteId 0 because we simply want a list of resources. Don't care about site
        'resources' => cataloging_redcap_getlistofresources(0)
    ));

    return $ret_val;
}

/**
 * Get information from REDCap via API
 * 
 * @param int $siteid Site (institution) id
 * @return array
 */
function cataloging_redcap_getlistofresources($siteid) {
    // Array of resources that we want to display. I imagine we can add these manually
    // These should remain sorted by date they were released
    $ret_val = make_projects_array();


    // Each resource (project) will have 0 or more associated surveys for any given $siteid.
    // Query REDCap using the API to get the Project ID, Nickname, and contact information for $siteid
    // set up API
    require_once('RestCallRequest.php');
    $API_URL = "https://redcap.ctsacentral.org/api/";
   
    foreach ($ret_val as $key => $survey) {
//         print("<br>survey nickname: ".$survey['nickname']);
//         print("<br>survey contactname: ".$survey['contactname']);

        // REDCap API - get data
        $token = $survey['token'];
        $records = array();
        $events = array();
//        $fields = array('participant_id',$survey['nickname'],$survey['contactemail'],$survey['siteid'],'dateoflastedit');
        $fields = array('participant_id', $survey['nickname'], $survey['contactname'], $survey['contactemail'], $survey['siteid'], 'dateoflastedit');
        if($survey['unit_exists']!="")
            $fields[] = $survey['unit_exists'];
        $forms = array();
        $rawOrLabel = "raw";
        // an array containing all the elements that must be submitted to the API
        $parameters = array('content' => 'record', 'type' => 'flat', 'format' => 'json', 'records' => $records, 'events' => $events,
            'fields' => $fields, 'forms' => $forms, 'token' => $token, 'rawOrLabel' => $rawOrLabel);
        // create a new API request object
        $request = new RestCallRequest($API_URL, 'POST', $parameters);
        // initiate the API request
        $request->execute();
        // resulting data  
        $jsondata = utf8_encode($request->getResponseBody());
        $data = json_decode($jsondata);


 //       print_r($data);

        foreach ($data as $response) {
//            print_r($response);
//            print("<br>unit exists question:".$survey['unit_exists']);
            if ($response->$survey['siteid'] == $siteid) {
                $ret_val[$key]['data'][] = array('id' => $response->participant_id,
                    'nickname' => $survey['nickname'] != "" ? $response->$survey['nickname'] : "",
                    'contactname' => $survey['contactname'] == '???' ? '' : $response->$survey['contactname'],
                    'contactemail' => $survey['contactemail'] == '???' ? '' : $response->$survey['contactemail'],
                    'dateoflastedit' => date("m/d/Y", strtotime($response->dateoflastedit)),
                    'unit_exists' => ($survey['unit_exists']=="") ? 1 : $response->$survey['unit_exists'] // if no field is given for a "does this unit exist at this institution" question, then the survey would not be taken unless a unit existed. Thus, a unit exists so we return 1.
                );
            }
        }
        unset($data);
        unset($alreadySet);
    }

//    echo "<br> cataloging_redcap_getlistofresources ret_val: <br>";
//    print_r($ret_val);

    return $ret_val;
}

/**
 * Menu hook. Effectively a URL routing map
 * 
 * Creates a "Data Visualization" menu item under "Reports". URL routing
 * 
 * @return array
 */
function cataloging_menu() {
    $ret_val = array();
    
    // Public view
    $ret_val['reports/cataloging'] = array(
        'title' => t('Cataloging Project'),
        'description' => '',
        'page callback' => 'cataloging_home',
        'access callback' => 'cataloging_ispermitted',
        'type' => MENU_NORMAL_ITEM,
        'weight' => -1
    );
    
    // Private view, user must be authenticated
    $ret_val['reports/cataloging/private'] = array(
        'title' => t('Cataloging Project Administration'),
        'description' => '',
        'page callback' => 'cataloging_private',
        'access callback' => 'cataloging_ispermitted',
        'type' => MENU_NORMAL_ITEM,
        'weight' => -1
    );
    
    // Data visualization for one asset
    $ret_val['reports/cataloging/resource'] = array(
        'title' => t('Cataloging Project Resource Visualization'),
        'description' => '',
        'page callback' => 'cataloging_resource',
        'access callback' => 'cataloging_ispermitted',
        'type' => MENU_NORMAL_ITEM,
        'weight' => 0
    );
    
    // Testing mode - filtering
    $ret_val['reports/cataloging/filtering'] = array(
        'title' => t('Cataloging Project Filtering'),
        'description' => '',
        'page callback' => 'cataloging_filtering',
        'access callback' => 'cataloging_ispermitted',
        'type' => MENU_NORMAL_ITEM,
        'weight' => 0
    );
    
    $ret_val['reports/cataloging/filtering_ajax'] = array(
        'title' => t('Cataloging Project Filtering'),
        'description' => '',
        'page callback' => 'cataloging_filtering_ajax',
        'access callback' => 'cataloging_ispermitted',
        'type' => MENU_NORMAL_ITEM,
        'weight' => 0
    );

    return $ret_val;
}

/**
 * All users are permitted to access this module at the moment
 * 
 * @return array 
 */
function cataloging_ispermitted() {
    return true;
}

/**
 * Theme specifies which template to render and which arguments to pass to that template
 * 
 * @return array 
 */
function cataloging_theme() {
    return array(
        'cataloging_home' => array(
            'variables' => array(
                'data' => NULL
            ),
            'template' => 'cataloging-home'
        ),
        'cataloging_private' => array(
            'variables' => array(
                'data' => NULL
            ),
            'template' => 'cataloging-private'
        ),
        'cataloging_resource' => array(
            'variables' => array(
                'data' => NULL,
                'title' => NULL,
                'description' => NULL,
                'shameFactor' => NULL
            ),
            'template' => 'cataloging-resource'
        ),
        'cataloging_filtering' => array(
            'variables' => array(
                'data' => NULL
            ),
            'template' => 'cataloging-filtering'
        )
    );
}

/**
 * ???
 * 
 * @param type $data
 * @return type 
 */
function getFiveNumberSummary($data) {
    sort($data);
    $five_number_summary['min'] = $data[0];
    $five_number_summary['max'] = end($data);
    $five_number_summary['median'] = getMedian($data);

    if (count($data) % 2 == 0) {
        $five_number_summary['Q1'] = getMedian(array_slice($data, 0, count($data) / 2));
        $five_number_summary['Q3'] = getMedian(array_slice($data, count($data) / 2, count($data) / 2));
    } else {
        $five_number_summary['Q1'] = getMedian(array_slice($data, 0, (count($data) - 1) / 2));
        $five_number_summary['Q3'] = getMedian(array_slice($data, (count($data) - 1) / 2 + 1, (count($data) - 1) / 2));
    }
    return $five_number_summary;
}

/**
 * ???
 * 
 * @param type $data
 * @return type 
 */
function getMedian($data) {
    sort($data);
    if (count($data) % 2 == 0) {
        $lower_index = count($data) / 2 - 1; //subtract 1 because 0 indexed
        $upper_index = $lower_index + 1;
        $median = ($data[$lower_index] + $data[$upper_index]) / 2;
    } else {
        $median = $data[(count($data) - 1) / 2];
    }
    return $median;
}

/**
 * Redirects the user to the authentication page. Passes along the current URL
 * so user is sent back to this page after logging in.
 */
function redirectToLogin() {
    $thisUrl = url($_GET['q'], array('absolute' => true));
    if(strpos($thisUrl, 'ctsacentral.org') !== false) {
        header('Location: https://redcap.ctsacentral.org/plugins/auth/?redirectUrl='.urlencode($thisUrl));
    } else {
        // TODO, handle development sites
        error_log('cataloging.module -> redirectToLogin does not work in development.');
    }
    
}

function cataloging_create_drupalCode_institutionName_key()
{
    $metadata = get_REDCap_metadata('B13F558449AB6EDF3090D8452022F8C8','cru_site');// array of "drupal code, institution" (ex: 62, Albert Einstein College of Medicine)
    foreach ($metadata as $field) {
            if ($field->field_name == 'cru_site') {
                $ctsaInstitutionsList = explode("\n", $field->select_choices_or_calculations);
                break;
            }
        }
        foreach ($ctsaInstitutionsList as $rawValueAndLabel) {
            //get insitution
            preg_match("/,.*/", $rawValueAndLabel, $institution_match);
            $institution = trim(preg_replace("/,/", "", $institution_match[0], 1));
            //get drupal code
            preg_match("/.{1,4},/", $rawValueAndLabel, $drupalCode_match);
            $drupalCode = trim(preg_replace("/,/", "", $drupalCode_match[0], 1));
            $allInstitutionsUnsorted[$drupalCode] = $institution;
            $allInstitutionsStrReplace[$drupalCode] = str_replace('The ', '', $institution);
        }
        asort($allInstitutionsStrReplace);
        foreach ($allInstitutionsStrReplace as $code => $inst) {
            $allInstitutions[$code] = $allInstitutionsUnsorted[$code];
        
        }
        
        return $allInstitutions;
}

function make_projects_array()
{
//    return array(
//     '74' => array('pid' => '74', 'title' => 'Clinical Research Units', 'token' => 'B13F558449AB6EDF3090D8452022F8C8', 'surveycode' => '8HTXod', 'hasMultipleSurveys' => 1, 'data' => array(),
//         'description' => 'Clinical Research Units (CRUs) provide Research Project Managers (RPMs), regulatory support, Quality Assurance and monitoring services, Research Subject Advocates (RSAs), nursing care, coordinator services, space and dedicated facilities that support the conduct of inpatient and outpatient studies.  CRUs are one of the most critical pieces of clinical and translational research infrastructure across the CTSA Consortium. <b>The survey used to collect data for this asset was developed by members of the Clinical Services Core Key Function Committee, who generously allowed incorporation of the data into the Cataloging Project.</b>',
//         'siteid' => 'cru_site', 'unit_exists' => '','defaultQuestionToDisplay'=>'cru_accessible','fieldsToExclude'=> array('cru_ctsa_funds','cru_nih_chargeback','cru_chargeback_rate','cru_telehealth','cru_resour_tracked'),
//         'nickname' => 'cru_title', 'nickname_backup' => 'Contact', 'contactname' => 'cru_contactname', 'contactemail' => 'cru_contactemail', 'contactphone' => 'cru_contactphone', 'public_date' => 'September 4, 2012'
//     ),
//     '87' => array('pid' => '87', 'title' => 'Pilot Funding Programs', 'token' => 'AEB1D35EADF347844C4824971829EEF6', 'surveycode' => 'A95qYM', 'hasMultipleSurveys' => 1, 'data' => array(),
//         'description' => 'Pilot funding provides access to funds to help investigators generate pilot and preliminary data for translational projects and grant applications. Pilot funds can help investigators broaden the scope of their research, foster collaboration between newly-organized scientific teams, and encourage novel methods development. Pilot funds can also be a source of research support for promising trainees and junior faculty to shorten their time to research independence, and encourage novel methodology/technology/core facility developments. Pilot programs are a required component of the CTSA RFA.',
//         'siteid' => 'pilotfunds_institution', 'unit_exists' => 'pilotfunds_site', 'defaultQuestionToDisplay'=>'pilotfunds_site','fieldsToExclude'=> array('pilotfunds_site'),
//         'nickname' => 'pilotfunds_programname', 'nickname_backup' => 'Primary Pilot Funding Program', 'contactname' => 'pilotfunds_contactname', 'contactemail' => 'pilotfunds_contactemail', 'contactphone'=> 'pilotfunds_contactphone', 'public_date' => 'September 4, 2012'
//     ),
//     '70' => array('pid' => '70', 'title' => 'Electronic Health Records and Clinical Data Reuse', 'token' => 'D690E115C92F4A62453FAF8A3D061DFA', 'surveycode' => 'cSEo4w', 'hasMultipleSurveys' => 1, 'data' => array(),
//         'description' => 'An Electronic Health Record (EHR) is a computerized patient chart established as the main source of longitudinal and centralized patient information in a hospital/health system. It allows storage, retrieval and modification of records by all care providers. Having an EHR is requisite to secondary reuse of clinical data.',
//         'siteid' => 'ehr_institution', 'unit_exists' => 'ehr_used_at_site', 'defaultQuestionToDisplay'=>'ehr_used_at_site','fieldsToExclude'=> array('ehr_multiple','ehr_edw_ctsa_funds'),
//         'nickname' => 'ehr_name', 'nickname_backup' => 'Primary EHR System', 'contactname' => 'ehr_contactname', 'contactemail' => 'ehr_contactemail', 'contactphone'=>'ehr_contactphone', 'public_date' => 'September 20, 2012'
//     ),
//     '232' => array('pid' => '232', 'title' => 'National and Regional Network Memberships', 'token' => 'B653E1615A2A93A682C67D2D2AF079AD', 'surveycode' => 'pM2s7T', 'hasMultipleSurveys' => 0, 'data' => array(),
//         'description' => 'These networks are NIH funded networks comprising multiple CTSA sites that provide additional resources and power to the CTSA Consortium network.',
//         'siteid' => 'network_institution', 'unit_exists' => 'networks_site', 'defaultQuestionToDisplay'=>'networks_site','fieldsToExclude'=> array(),
//         'nickname' => 'networks_nickname', 'nickname_backup' => 'Network Memberships', 'contactname' => '???', 'contactemail' => '???', 'contactphone' => '???', 'public_date' => 'September 20, 2012'
//     ),
//     '242' => array('pid' => '242', 'title' => 'Biobanks', 'token' => 'F821547336E92CD5A464A885D8A779B6', 'surveycode' => 'D9vhWQ', 'hasMultipleSurveys' => 0, 'data' => array(),
//         'description' => 'A large scale biobank is a category of biorepository which stores human biological samples for use in research, including DNA and/or other tissues. The samples in these types of biobanks and the data derived from those samples can be used by multiple researchers for multiple purposes. Biological samples are linked to clinical data derived from a continuously updated electronic system (e.g. an Electronic Health Record). The scale of a biobank is at least 10,000 biological specimens; records and samples are derived from individuals with diverse diseases (rather than a cohort defined by a specific disease/condition).',
//         'siteid' => 'ctsa_institution', 'unit_exists' => 'biobank_institution', 'defaultQuestionToDisplay'=>'biobank_institution','fieldsToExclude'=> array('biobank_ctsa_funds','biobank_reference'),
//         'nickname' => 'biobank_name', 'nickname_backup' => '', 'contactname' => 'biobank_contactname', 'contactemail' => 'biobank_contactemail', 'contactphone'=>'biobank_contactphone', 'public_date' => 'October 11, 2012'
//     ),
//     '244' => array('pid' => '244', 'title' => 'Clinical Trial Coordinating Centers', 'token' => '28914CFACAFDFBA6CD60FDFF3F9E6C0C', 'surveycode' => 'Gizn8W', 'hasMultipleSurveys' => 1, 'data' => array(),
//         'description' => 'Comprehensive Clinical Trial Coordinating Centers (CTCCs) support multi-institutional academic research through the development, management, and reporting of hypothesis-driven, controlled clinical trials. Comprehensive Centers are defined as regularly supporting multi-institutional clinical trials, as opposed to centers that have received funding to support a single multi-institutional study.',
//         'siteid' => 'ctsa_institution', 'unit_exists' => 'ctcc_institution', 'defaultQuestionToDisplay'=>'ctcc_institution','fieldsToExclude'=> array('ctcc_ctsa_funds1'),
//         'nickname' => 'ctcc_name1', 'nickname_backup' => '', 'contactname' => 'ctcc_contactname1', 'contactemail' => 'ctcc_contactemail1', 'contactphone'=>'ctcc_contactphone1', 'public_date' => 'October 11, 2012'
//     ),
//     '257' => array('pid' => '257', 'title' => 'High-Throughput Screening', 'token' => 'BEACD4816E59DE621955AD922F1E6C29', 'surveycode' => 'E7xgrW', 'hasMultipleSurveys' => 1, 'data' => array(),
//         'description' => 'High-throughput screening (HTS) is a method for scientific experimentation especially used in drug discovery. Using robotics, data processing and control software, liquid handling devices, and sensitive detectors, HTS allows rapid conduct of tens of thousands up to millions of chemical, genetic or pharmacological tests to identify active compounds, antibodies or genes which modulate a particular biomolecular pathway. High-throughput screening capabilities allow a minimum of 10,000 tests per day. The results of these experiments provide starting points for drug design and for understanding the interaction or role of a particular biochemical process in biology.',
//         'siteid' => 'ctsa_institution', 'unit_exists' => 'hts_site', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array('hts_ctsa_funds1','hts_site'),
//         'nickname' => 'hts_facility_name1', 'nickname_backup' => '', 'contactname' => 'hts_contactname1', 'contactemail' => 'hts_contactemail1', 'contactphone'=>'hts_contactphone1', 'public_date' => 'November 1, 2012'
//     ),
//     '258' => array('pid' => '258', 'title' => 'High End Instrumentation', 'token' => '5BEB916F63178ED05DCB13EDF2698957', 'surveycode' => 'RGVqZf', 'hasMultipleSurveys' => 1, 'data' => array(),
//         'description' => 'The NCRR High-End Instrumentation (HEI) grant program supported the purchase of a single major piece of research equipment that costs more than $750,000. Instruments in this price range include structural and functional imaging systems, macromolecular NMR spectrometers, high-resolution mass spectrometers, electron microscopes, and supercomputers. Many awards have been made over the past 6 years, and a subset of these instruments is available for clinical and translational research.',
//         'siteid' => 'ctsa_institution', 'unit_exists' => 'hei_site', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array('hei_ctsa_funds1','hei_site'),
//         'nickname' => 'hei_name1', 'nickname_backup' => '', 'contactname' => 'hei_contactname1', 'contactemail' => 'hei_contactemail1', 'contactphone' => 'hei_contactphone1', 'public_date' => 'November 1, 2012'
//     ),
//     '274' => array('pid' => '274', 'title' => 'Non-NIH Lab Partnerships', 'token' => 'B0816D32D1B6183B32E6602E9116B5E4', 'surveycode' => 'Fq4yf9', 'hasMultipleSurveys' => 0, 'data' => array(),
//        'description' => 'Non-NIH National Lab Partnerships provide additional resources and power to the CTSA consortium network.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => 'nonnihpartner_site', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array(),
//        'nickname' => '', 'nickname_backup' => 'Non-NIH Lab Partnership', 'contactname' => '???', 'contactemail' => '???', 'contactphone'=>'???', 'public_date' => 'November 22, 2012'
//     ),
//    '275' => array('pid' => '275', 'title' => 'Medicinal Chemistry Facilities', 'token' => '28F2C0BA585E0B908E6CB2DF35DF1472', 'surveycode' => 'JnsCaX', 'hasMultipleSurveys' => 0, 'data' => array(),
//        'description' => 'Medicinal chemistry is the chemistry discipline concerned with the design, development and synthesis of pharmaceutical drugs. The discipline combines expertise from chemistry and pharmacology to identify, develop and synthesize chemical agents that have a therapeutic use.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => 'medchem_site', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array('medchem_ctsa_funds'),
//        'nickname' => 'medchem_name', 'nickname_backup' => '', 'contactname' => 'medchem_contactname', 'contactemail' => 'medchem_contactemail', 'contactphone'=>'medchem_contactphone', 'public_date' => 'November 22, 2012'
//     ),
//     '280' => array('pid' => '280', 'title' => 'Unique Clinical Study Populations', 'token' => 'B93EA715325F76D66557091AD5612C9F', 'surveycode' => 'vpY8yJ', 'hasMultipleSurveys' => 1, 'data' => array(),
//        'description' => 'These study populations include unique and rare patient populations or study cohorts that are readily available to participate in clinical and translational research. Populations could include specific ethnic, age, or disease groups.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => 'studypop_site', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array('studypop_reference','studypop_site'),
//        'nickname' => 'studypop_name', 'nickname_backup' => '', 'contactname' => 'studypop_contactname', 'contactemail' => 'studypop_contactemail', 'contactphone'=>'studypop_contactphone', 'public_date' => 'December 13, 2012'
//     ),
//     '281' => array('pid' => '281', 'title' => 'Drug Discovery Centers', 'token' => '09FC80F497E0C0E41AD46278731A73ED', 'surveycode' => 'eqaUyf', 'hasMultipleSurveys' => 1, 'data' => array(),
//        'description' => 'Drug Discovery Programs support the identification of novel therapeutic candidates, synthesis, characterization, screening, and assays for therapeutic efficacy. Once a compound has shown its value in these tests, it will begin the process of drug development prior to clinical trials. Large-scale drug discovery programs include the necessary infrastructure and capabilities to support the entire drug discovery process.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => 'drug_institution', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array('drug_ctsa_funds1'),
//        'nickname' => 'drug_centername1', 'nickname_backup' => '', 'contactname' => 'drug_contactname1', 'contactemail' => 'drug_contactemail1', 'contactphone'=>'drug_contactphone1', 'public_date' => 'December 13, 2012'
//     ),      
//     '295' => array('pid' => '295', 'title' => 'Nanotechnology Centers/Programs', 'token' => '4EEB14C52D645D6491783BF5AF29945A', 'surveycode' => '3JejiR', 'hasMultipleSurveys' => 1, 'data' => array(),
//        'description' => 'Nanotechnology centers or programs are distinct organizational offices, departments or entities (i.e. with a scientific director, laboratory space, graduate students and dedicated technical staff) which study and develop materials, devices, or other structures possessing at least one dimension sized from 1 to 100 nanometers. Nanoscience and nanotechnology are based on the ability to synthesize, organize, characterize, and manipulate matter systematically at the nanoscale, creating uniquely functional materials which can be inorganic, organic, biological, or a hybrid.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => 'nanotech_site', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array('nanotech_site','nanotech_ctsa_funds1'),
//        'nickname' => 'nanotech_name1', 'nickname_backup' => '', 'contactname' => 'nanotech_contactname1', 'contactemail' => 'nanotech_contactemail1', 'contactphone'=>'nanotech_contactphone1', 'public_date' => 'January 3, 2013'
//     ),
//     '296' => array('pid' => '296', 'title' => 'cGMP Facilities', 'token' => '9C751EF8A41321E1BCF12497EFD55D55', 'surveycode' => 'htf2S5', 'hasMultipleSurveys' => 1, 'data' => array(),
//        'description' => 'A cGMP Facility is a manufacturing facility capable of producing investigational pharmaceutical materials for clinical trials and/or commercial pharmaceutical products under the FDA-regulated Current Good Manufacturing Practices (cGMP). It includes the manufacturing space, the storage warehouse for raw and finished product, and support laboratory areas.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => 'cgmp_site', 'defaultQuestionToDisplay'=>'','fieldsToExclude'=> array('cgmp_site','cgmp_ctsa_funds1'),
//        'nickname' => 'cgmp_name1', 'nickname_backup' => '', 'contactname' => 'cgmp_contactname1', 'contactemail' => 'cgmp_contactemail1', 'contactphone'=>'cgmp_contactphone1', 'public_date' => 'January 3, 2013'
//     ),
//     '308' => array('pid' => '308', 'title' => 'Expert Consults', 'token' => '361A1DB8A297CD1B02E3E34617D79CE7', 'surveycode' => 'rjJQXV', 'hasMultipleSurveys' => 0, 'data' => array(),
//        'description' => 'Researchers need specific expert input to improve the quality of their research projects; expert consultations involve selected content and domain experts (biostatistics, ethics, methodologists, clinical, etc.) who are available to any local investigator to improve the quality of a specific clinical and translational science project.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => '', 'defaultQuestionToDisplay'=>'consults_site','fieldsToExclude'=> array('consults_funding','consults_reference'),
//        'nickname' => '', 'nickname_backup' => 'Expert Consults', 'contactname' => 'consults_contactname', 'contactemail' => 'consults_contactemail', 'contactphone'=>'consults_contactphone', 'public_date' => 'January 24, 2013'
//     ),
//     '309' => array('pid' => '309', 'title' => 'Community Engaged Research Infrastructures', 'token' => '7A19E070E89B87297AB6179FABFC73FE', 'surveycode' => 'y5WAEt', 'hasMultipleSurveys' => 0, 'data' => array(),
//        'description' => 'Community engaged research is a framework or approach for conducting research that is characterized by guiding principles and the relationships between local communities and academic researchers. Community engaged research requires partnership development, cooperation and negotiation, and commitment to addressing local health issues.',
//        'siteid' => 'ctsa_institution', 'unit_exists' => '', 'defaultQuestionToDisplay'=>'ce_pilot_funds','fieldsToExclude'=> array('ce_pbrn_support_1','ce_pbrn_support_2','ce_pbrn_support_3','ce_pbrn_support_4','ce_pbrn_support_5','ce_pbrn_support_6','ce_pbrn_support_7','ce_pbrn_support_8'),
//        'nickname' => 'ce_programname', 'nickname_backup' => '', 'contactname' => 'ce_contactname', 'contactemail' => 'ce_contactemail', 'contactphone'=>'ce_contactphone', 'public_date' => 'January 24, 2013'
//     )
//    );    
    
    $result = db_query("SELECT * FROM cataloging_projects");
    while($row=$result->fetchAssoc()) {
        //    print("<br>row: ");
        //    print_r($row);
            foreach($row as $colname => $value)
            {
                if($colname!='fieldsToExclude')
                    $return[$row['pid']][$colname] = $value; 
                else
                {
                    if($value=='')
                        $return[$row['pid']][$colname] = array();
                    else
                    {
                        $array = explode (",", $value);
                        foreach($array as $v)
                            $arraytrimmed[] = trim($v);
                        $return[$row['pid']][$colname] = $arraytrimmed;
                    }
                    
                }
                    
            }
            $return[$row['pid']]['data'] = array();
        }
    //print("<br>projects array: ");
    //print_r($return);
        return $return;
    
    
}

function get_REDCap_metadata($token,$fields = array(), $format = 'json')
{
    // set up API
    require_once('RestCallRequest.php');
    // an array containing all the elements that must be submitted to the API
    $parameters = array('content' => 'metadata', 'fields' => $fields, 'format' => $format, 'token' => $token);
    // create a new API request object
    $request = new RestCallRequest("https://redcap.ctsacentral.org/api/", 'POST', $parameters);
    // initiate the API request
    $request->execute();
    // resulting metadata
    $json_metadata = utf8_encode($request->getResponseBody());

    $metadata = json_decode($json_metadata);
    
    return $metadata;
}

//function get_REDCap_data($token,$fields=array(),$rawOrLabel='raw',$records = array(), $events = array(), $forms = array(),$format='json')
//{
//    // set up API
//    require_once('RestCallRequest.php');
//    // an array containing all the elements that must be submitted to the API
//    $parameters = array('content' => 'record', 'type' => 'flat', 'format' => $format, 'records' => $records, 'events' => $events,
//        'fields' => $fields, 'forms' => $forms, 'token' => $token, 'rawOrLabel' => $rawOrLabel);
//    // create a new API request object
//    $request = RestCallRequest($API_URL, 'POST', $parameters);
//    // initiate the API request
//    $request->execute();
//    // resulting data
//    $data = json_decode($request->getResponseBody());
//    
//    return $data;    
//}

function cataloging_createFilters($projectsArray,$ajax=TRUE)
{
    $filters = array(
        '74'=>array(
            'filters'=> array(
                'External projects accepted' => 'cru_accessible = 1',
                'Industry studies' => 'cru_industry = 1',
                'Dedicated pediatric' => 'cru_patientpop = 1 AND cru_dedicated_peds = 1',
                'Infusion chairs' => 'cru_infusionchairs > 0',
                'Phase I studies' => 'cru_phase1 = 1',
                'Veterans Affairs affiliation' => 'cru_va = 1',
                'Research pharmacy' => 'cru_general___3 = 1',
                'Cardiovascular resources' => 'cru_cardiovascular___0 = 1 OR cru_cardiovascular___1 = 1 OR cru_cardiovascular___2 = 1 OR cru_cardiovascular___3 = 1 OR cru_cardiovascular___4 = 1 OR cru_cardiovascular___5 = 1 OR cru_cardiovascular___6 = 1 OR cru_cardiovascular___7 = 1 OR cru_cardiovascular___8 = 1 OR cru_cardiovascular___9 = 1 OR cru_cardiovascular___10 = 1 OR cru_cardiovascular___11 = 1 OR cru_cardiovascular___12 = 1 OR cru_cardiovascular___13 = 1 OR cru_cardiovascular___14 = 1 OR cru_cardiovascular___15 = 1 OR cru_cardiovascular___16 = 1',
                'Nervous system testing' => 'cru_nervoussystem___0 = 1 OR cru_nervoussystem___1 = 1 OR cru_nervoussystem___2 = 1 OR cru_nervoussystem___3 = 1 OR cru_nervoussystem___4 = 1',
                'Behavioral assessments' => 'cru_behavioral___0 = 1 OR cru_behavioral___1 = 1 OR cru_behavioral___2 = 1 OR cru_behavioral___3 = 1 OR cru_behavioral___4 = 1 ',
                'Exercise/metabolic resources' => 'cru_exercise_phys___0 = 1 OR cru_exercise_phys___1 = 1 OR cru_exercise_phys___2 = 1 OR cru_exercise_phys___3 = 1 OR cru_exercise_phys___4 = 1 OR cru_exercise_phys___5 = 1 OR cru_exercise_phys___6 = 1 OR cru_exercise_phys___7 = 1 OR cru_exercise_phys___8 = 1 OR cru_exercise_phys___9 = 1 OR cru_exercise_phys___10 = 1 OR cru_exercise_phys___11 = 1 OR cru_exercise_phys___12 = 1 OR cru_exercise_phys___13 = 1 OR cru_exercise_phys___14 = 1 OR cru_exercise_phys___15 = 1 OR cru_exercise_phys___16 = 1 OR cru_exercise_phys___17 = 1 OR cru_exercise_phys___18 = 1 OR cru_exercise_phys___19 = 1',
                'Nutrition resources' => 'cru_nutrition___0 = 1 OR cru_nutrition___1 = 1 OR cru_nutrition___2 = 1 OR cru_nutrition___3 = 1 OR cru_nutrition___4 = 1 OR cru_nutrition___5 = 1 OR cru_nutrition___6 = 1 OR cru_nutrition___7 = 1 OR cru_nutrition___8 = 1 OR cru_nutrition___9 = 1',
                'Sleep studies' => 'cru_sleep___0 = 1 OR cru_sleep___1 = 1 OR cru_sleep___2 = 1 OR cru_sleep___3 = 1 OR cru_sleep___4 = 1 OR cru_sleep___5 = 1 OR cru_sleep___6 = 1 OR cru_sleep___7 = 1 OR cru_sleep___8 = 1 OR cru_sleep___9 = 1',
                'Telehealth system' => 'cru_telehealth = 1',
                'Imaging capabilities' => 'cru_imaging___0 = 1 OR cru_imaging___1 = 1 OR cru_imaging___2 = 1 OR cru_imaging___3 = 1 OR cru_imaging___4 = 1 OR cru_imaging___5 = 1 OR cru_imaging___6 = 1 OR cru_imaging___7 = 1 OR cru_imaging___8 = 1 OR cru_imaging___9 = 1 OR cru_imaging___10 = 1 OR cru_imaging___11 = 1 OR cru_imaging___12 = 1 OR cru_imaging___13 = 1'
            )
        ),
        '257'=>array(
            'filters'=>array(
                'External projects accepted' => 'hts_accessible1 = 1',
                'Small molecule library' => 'hts_libraries1___0 = 1',
                'Antibody library' => 'hts_libraries1___2 = 1',
                'Peptide library' => 'hts_libraries1___3 = 1',
                'siRNA/RNAi library' => 'hts_libraries1___4 = 1',
                'cDNA library' => 'hts_libraries1___5 = 1',
                'Novel assay development' => 'hts_genservices1___1 = 1',
                'Compound sourcing services' => 'hts_genservices1___2 = 1',
                'Quality control' => 'hts_genservices1___3 = 1',
                'Sample storage/retreival/reformatting' => 'hts_genservices1___4 = 1',
                'Off-site sample distribution' => 'hts_genservices1___7 = 1',
                'Whole-cell screening' => 'hts_wholecell1 = 1',
            )
        
        ),
        '275'=>array(
            'filters'=> array(
                'External projects accepted' => 'medchem_accessible = 1',
                'Small scale synthesis' => 'medchem_synth___0 = 1',
                'Large scale synthesis' => 'medchem_synth___1 = 1',
                'Compound plating/dispensing' => 'medchem_genservices___3 = 1',
                'Patentability assessments' => 'medchem_genservices___5 = 1',
                'Solubility, permeability, stability' => 'medchem_genservices___6 = 1',
                'DMPK assays' => 'medchem_genservices___7 = 1 OR medchem_genservices___8 = 1',
                'Formulation development' => 'medchem_genservices___9 = 1',
                'Novel small molecule synthesis' => 'medchem_molecules___0 = 1',
                'Natural product synthesis' => 'medchem_molecules___1 = 1',
                'Fluorescently labeled compounds' => 'medchem_molecules___2 = 1',
                'Affinity labeled compounds' => 'medchem_molecules___3 = 1',
                'Radiolabeled compounds' => 'medchem_molecules___5 = 1',
                'Analytical techniques' => 'medchem_analytics___0 = 1 OR medchem_analytics___1 = 1 OR medchem_analytics___2 = 1 OR medchem_analytics___3 = 1 OR medchem_analytics___4 = 1 OR medchem_analytics___5 = 1 OR medchem_analytics___6 = 1 OR medchem_analytics___7 = 1',
                'Cheminformatic capabilities' => 'medchem_cheminform___0 = 1 OR medchem_cheminform___1 = 1 OR medchem_cheminform___2 = 1 OR medchem_cheminform___3 = 1 OR medchem_cheminform___4 = 1',
                'Drug design expertise' => 'medchem_focus___1 = 1 OR medchem_focus___2 = 1 OR medchem_focus___3 = 1 OR medchem_focus___4 = 1',
            )
            
        ),
        '296'=>array(
            'filters'=>array(
                'FDA registered' => 'cgmp_fda_registered1 = 1',
                'Biologics manufacturing' => 'cgmp_products1___0 = 1',
                'Drug manufacturing' => 'cgmp_products1___1 = 1 OR cgmp_products1___2 = 1',
                'Device manufacturing' => 'cgmp_products1___3 = 1',
                'Biologics BSL1' => 'cgmp_biologics1___0 = 1',
                'Biologics BSL2' => 'cgmp_biologics1___1 = 1',
                'Biologics BSL3' => 'cgmp_biologics1___2 = 1',
                'Process development' => 'cgmp_biologics1___4 = 1 OR cgmp_smallmolecules1___3 = 1',
                'Fill and Finish' => 'cgmp_biologics1___8 = 1 OR cgmp_smallmolecules1___0 = 1',
                'Scale-up and bulk production' => 'cgmp_biologics1___6 = 1 OR cgmp_biologics1___7 OR cgmp_smallmolecules1___2 = 1',
                'Stability studies' => 'cgmp_biologics1___9 = 1 OR cgmp_smallmolecules1___5 = 1',
                'CMC support for IND filings' => 'cgmp_biologics1___10 = 1 OR cgmp_smallmolecules1___6 = 1',
                'Drug product formulation' => 'cgmp_products1___1 = 1',
                'Quality assurance group' => 'cgmp_qa_group1 = 1',
            )
       ),
       '242'=>array(
           'filters'=>array(
               'External projects accepted' => 'biobank_accessible = 1',
                'Blood samples' => 'biobank_specimens___1',
                'Cerebrospinal fluid' => 'biobank_specimens___2',
                'DNA' => 'biobank_specimens___3',
                'Plasma' => 'biobank_specimens___4',
                'Saliva' => 'biobank_specimens___5',
                'Serum' => 'biobank_specimens___6',
                'Tissue' => 'biobank_specimens___7',
                'Urine' => 'biobank_specimens___8',
                'Linked to clinical data' => 'biobank_linkage = 1',
                'Pediatric samples' => 'biobank_specimen_pop=1 OR biobank_specimen_pop=2'
               )
       ),
       '280'=>array(
           'filters'=>array(
               'External projects accepted' => 'studypop_access_external = 1',
                'Age-specific Populations' => 'studypop_demograph___0',
                'African American Heritage' => 'studypop_demograph___1',
                'Asian Heritage' => 'studypop_demograph___2',
                'Geographic Populations' => 'studypop_demograph___3',
                'Hispanic Heritage' => 'studypop_demograph___4',
                'Jewish Heritage' => 'studypop_demograph___5',
                'Native American Heritage' => 'studypop_demograph___6',
                'Patients of a Specific Disease Group' => 'studypop_demograph___7',
                'Russian and/or Siberian Heritage' => 'studypop_demograph___8',
                'Twin Populations' => 'studypop_demograph___9'
           )
       ),
       '281'=>array(
           'filters'=>array(
               'External projects accepted' => 'drug_accessible1=0 OR drug_accessible1=1 OR drug_accessible1=2',
                'Industry experience' => 'drug_industry_employees1 = 0 OR drug_industry_employees1=1 OR drug_industry_employees1=2 OR drug_industry_employees1=3 OR drug_industry_director1 = 1',
                'Training mechanisms' => 'drug_training1___0 = 1 OR drug_training1___1 = 1 OR drug_training1___2 = 1 OR drug_training1___4 = 1',
                'Biologics focus' => 'drug_research_type1___0',
                'Drug delivery or device focus' => 'drug_research_type1___1',
                'Small molecules focus' => 'drug_research_type1___2',
                'Cardiology' => 'drug_ther_areas1___0=1',
                'Dermatology' => 'drug_ther_areas1___1=1',
                'Endocrinology' => 'drug_ther_areas1___2=1',
                'Immunology' => 'drug_ther_areas1___3=1',
                'Infectious disease' => 'drug_ther_areas1___4=1',
                'Neuroscience' => 'drug_ther_areas1___5=1',
                'Oncology' => 'drug_ther_areas1___6=1',
                'Pulmonary disease' => 'drug_ther_areas1___7=1',
                'Regenerative medicine' => 'drug_ther_areas1___8=1',
                'Rare or orphan disease' => 'drug_ther_areas1___9=1',
           )
       ),
        '320'=>array(
            'filters'=>array(
                'External projects accepted' => 'ind_ide_accessible=1',
                'FDA regulatory liaison' => 'ind_ide_fdaliaison=1',
                'Attend FDA meetings' => 'ind_ide_preind > 0 OR ind_ide_preide > 0',
                'New molecular entity INDs' => 'ind_ide_nme > 0',
                'New device IDEs' => 'ind_ide_devices > 0',
                'Structured training' => 'ind_ide_training___0',
                'Customized educational sessions' => 'ind_ide_training___1 OR ind_ide_training___2',
                'Regulatory document templates' => 'ind_ide_templates = 1 OR ind_ide_docs=1',
            )
        ),
        '244'=>array(
            'filters'=>array(
                'Site prep/start-up' => 'ctcc_startup1___0 = 1 OR ctcc_startup1___1 = 1 OR ctcc_startup1___2=1 OR ctcc_startup1___3=1 OR ctcc_startup1___4=1 OR ctcc_startup1___5=1 OR ctcc_startup1___6=1',
                'Biostatistics support' => 'ctcc_gen_services1___0=1',
                'Site monitoring' => 'ctcc_gen_services1___1=1',
                'Recruitment monitoring' => 'ctcc_gen_services1___2=1',
                'Regulatory compliance support' => 'ctcc_gen_services1___3=1 OR ctcc_gen_services1___10=1',
                'Outcomes monitering' => 'ctcc_gen_services1___4=1',
                'Adverse events monitoring' => 'ctcc_gen_services1___5=1',
                'DSMB/C reporting' => 'ctcc_gen_services1___6=1',
                'Billing management' => 'ctcc_gen_services1___7=1',
                'Communications management' => 'ctcc_gen_services1___8=1 OR ctcc_gen_services1___9=1 OR ctcc_gen_services1___11=1',
                'Data management' => 'ctcc_data_manag1___0=1 OR ctcc_data_manag1___1=1 OR ctcc_data_manag1___2=1 OR ctcc_data_manag1___3=1 OR ctcc_data_manag1___4=1 OR ctcc_data_manag1___5=1',
                'Clinical materials management' => 'ctcc_clinmaterial1___0=1 OR ctcc_clinmaterial1___1=1 OR ctcc_clinmaterial1___2=1 OR ctcc_clinmaterial1___3=1',
                'Manuscript preparation' => 'ctcc_manuscript1___0=1 OR ctcc_manuscript1___1=1 OR ctcc_manuscript1___2=1 OR ctcc_manuscript1___3=1 OR ctcc_manuscript1___4=1',
                'HIPPA compliant' => 'ctcc_edc_security1___0=1',
                '21 CFR Part 11 compliant' => 'ctcc_edc_security1___1=1',
                'FISMA compliant' => 'ctcc_edc_security1___2=1 OR ctcc_edc_security1___3=1 OR ctcc_edc_security1___4=1'
            )
        ),
        '342'=>array(
            'filters'=>array(
                'Combined with tech transfer' => 'commer_techtransfer_1=2',
                'Partners with tech transfer' => 'commer_techtransfer_1=3',
                'Combined with conflict of interest office' => 'commer_coi_1=2',
                'Partners with conflict of interest office' => 'commer_coi_1=3',
                'Product listings available' => 'commer_ip_1=1',
                'Technology listings available' => 'commer_techs_1=1',
                'Affiliated with CTSA' => 'commer_ctsa_funds_1=0 OR commer_ctsa_funds_1=1 OR commer_ctsa_funds_1=2',
            )
        ),
        '309'=>array(
            'filters'=>array(
                'Seed grants' => 'ce_pilot_funds=1',
                'Patient informatics tool' => 'ce_patient_tool=1',
                'Researcher informatics tool' => 'ce_researcher_tool=1',
                'Community health research center' => 'ce_health_center=1',
                'Participant recruitment resources' => 'ce_recruitment_resources=1',
                'Community review mechanisms' => 'ce_review_boards=1',
                'Training mechanisms' => 'ce_structured_training=1',
                'PBRN affiliated' => 'ce_pbrn=1',
                'CEnR-specific IRB review' => 'ce_irb=1',
            )
        ),
        '70'=>array(
            'filters'=>array(
                'Vendor system' => 'ehr_system=0',
                'Locally developed system' => 'ehr_system=1',
                'Combined vendor/local system' => 'ehr_system=2',
                'Uses Allscripts' => 'ehr_vendor___0=1',
                'Uses Cerner' => 'ehr_vendor___3=1',
                'Uses Epic' => 'ehr_vendor___6=1',
                'No. of records in EHR &ge; 2m' => 'ehr_patient_charts_no=1',
                'CPOE for inpatient records' => 'ehr_cpoe_inpt=1',
                'CPOE for outpatient records' => 'ehr_cpoe_outpt=1',
                'Clinical decision support' => 'ehr_decision_support=1',
                'Pharmacy data' => 'ehr_pharmacy=1',
                'Enterprise data warehouse' => 'ehr_edw=1',
                'No. of records in enterprise data warehouse &ge; 2m'=>'ehr_edw_patient_records_no=1',
                'Research data warehouse ' => 'ehr_rdw=1',
                'No. of records in research data warehouse &ge; 2m' => 'ehr_rdw_ind_subjects_no=1',
                'HIE adoption' => 'ehr_hie=1',
                'i2b2 adoption' => 'ehr_i2b2=1',
            )
        ),
        '308'=>array(
            'filters'=>array(
                'External projects accepted' => 'consults_accessible=1',
                'Biostatistics, informatics' => 'consults_expertdomains___1=1 OR consults_expertdomains___3=1',
                'Regulatory science/ethics' => 'consults_expertdomains___2=1 OR consults_expertdomains___6=1',
                'Drug discovery/development' => 'consults_expertdomains___4=1',
                'Device development/prototyping' => 'consults_expertdomains___5=1',
                'Experimental and clinical science' => 'consults_expertdomains___7=1',
                'Tech transfer and commercialization' => 'consults_expertdomains___8=1',
                'Comparative effectiveness ' => 'consults_expertdomains___9=1',
                'Implementation science' => 'consults_expertdomains___10=1',
                'Community engagement ' => 'consults_expertdomains___11=1',
                'Hypothesis formation/refinement' => 'consults_researchstage___1=1',
                'Grant preparation' => 'consults_researchstage___2=1',
                'Study design/implementation' => 'consults_researchstage___3=1 OR consults_researchstage___4=1',
                'Data analysis' => 'consults_researchstage___5=1',
                'Publication' => 'consults_researchstage___6=1',
                'Individual consults' => 'consults_format=1',
                'Group consults' => 'consults_format=2',
            )
        ),
        '290'=>array(
            'filters'=>array(
                'External projects accepted' => 'imaging_accessible=1',
                'Angiography' => 'imaging_instrumentation___0=1',
                'Bioluminescence' => 'imaging_instrumentation___1=1',
                'CT/PET/SPECT' => 'imaging_instrumentation___2=1 OR imaging_instrumentation___3=1 OR 4=1 OR imaging_instrumentation___5=1 OR imaging_instrumentation___6=1 OR imaging_instrumentation___7=1 OR imaging_instrumentation___8=1 OR imaging_instrumentation___17=1 OR imaging_instrumentation___18=1 OR imaging_instrumentation___25=1 OR imaging_instrumentation___26 =1',
                'Cyclotron' => 'imaging_instrumentation___9=1',
                'Diffusion tensor' => 'imaging_instrumentation___11=1',
                'Electroencephalography' => 'imaging_instrumentation___12=1',
                'Fluorscopy' => 'imaging_instrumentation___13=1',
                'MRI/fMRI/MRSI' => 'imaging_instrumentation___5=1 OR imaging_instrumentation___15=1 OR imaging_instrumentation___20=1 OR imaging_instrumentation___21=1',
                'Mock scanner' => 'imaging_instrumentation___19=1',
                'Near-infrared fluorescence' => 'imaging_instrumentation___22=1',
                'Optical imaging' => 'imaging_instrumentation___24=1',
                'Ultrasound' => 'imaging_instrumentation___28=1',
                'X-Ray' => 'imaging_instrumentation___7=1 OR imaging_instrumentation___29=1',
                'Human imaging' => 'imaging_instrumentation___0=1',
                'Animal imaging' => 'imaging_type___1=1 OR imaging_type___2=1 OR imaging_type___3=1',
                '&ge; 7T or &ge; $500K instrumentation' => 'imaging_ultra_hei_present=1',
            ),          
        ),
        '319'=>array(
              'filters'=>array(
              )
        ),
        '258'=>array(
            'filters'=>array(
                'Animal imaging' => 'hei_type1=0',
                'Crystallography' => 'hei_type1=1',
                'Flow cytometry' => 'hei_type1=9',
                'Genomics' => 'hei_type1=2',
                'High performance computing' => 'hei_type1=7',
                'High-throughput screening' => 'hei_type1=2',
                'Human imaging' => 'hei_type1=4',
                'Microscopy' => 'hei_type1=5',
                'Molecular imaging' => 'hei_type1=8',
                'Radiotracer production' => 'hei_type1=10',
                'Spectrometry' => 'hei_type1=6',
            )
        ),
        '295'=>array(
            'filters'=>array(
                'Nanotech core facilities available' => 'nanotech_cores1=1',
                'Nanomedicine/bionanotechnology focus' => 'nanotech_focus1=1',
                'Materials Research Science and Engineering Center' => 'nanotech_nsf1=0',
                'Nanoscale Science and Engineering Center' => 'nanotech_nsf1=1',
                'National Nanotechnology Infrastructure Network' => 'nanotech_nsf1=2',
                'NSF Center for Chemical Innovation Program' => 'nanotech_nsf1=3',
                'NSF Nanotechnology Center' => 'nanotech_nsf1=4',
                'NSF Science and Technology Center' => 'nanotech_nsf1=5 OR nanotech_nsf1=6',
                'NCI Center of Cancer Nanotechnology Excellence' => 'nanotech_nci1=1',
                'NHLBI Program of Excellence in Nanotechnology' => 'nanotech_nhlbi1=1',
            )
        ),
        '232'=>array(
            'filters'=>array(
                'Bioinformatics' => 'network_membership___5=1 OR network_membership___18=1',
                'Cardiology' => 'network_membership___27=1',
                'Clinical trials' => 'network_membership___0=1 OR network_membership___1=1 OR network_membership___3=1 OR network_membership___4=1 OR network_membership___8=1 OR network_membership___12=1 OR network_membership___13=1 OR network_membership___14=1 OR network_membership___16=1 OR network_membership___17=1 OR network_membership___19=1 OR network_membership___22=1 OR network_membership___23=1 OR network_membership___26=1 OR network_membership___27=1 OR network_membership___30=1 OR network_membership___31=1 OR network_membership___33=1 OR network_membership___35=1 OR network_membership___36=1',
                'CNS diseases' => 'network_membership___23=1 OR network_membership___26=1',
                'Drug discovery and development' => 'network_membership___11=1 OR network_membership___16=1 OR network_membership___18=1',
                'Endocrinology' => 'network_membership___14=1',
                'Genetic diseases' => 'network_membership___6=1 OR network_membership___15=1 OR network_membership___24=1 OR network_membership___30=1',
                'Hematology' => 'network_membership___10=1 OR network_membership___35=1',
                'Immunodeficiency disorders' => 'network_membership___16=1',
                'Pediatrics/neonatology' => 'network_membership___12=1 OR network_membership___17=1 OR network_membership___22=1 OR network_membership___24=1 OR network_membership___26=1 OR network_membership___27=1 OR network_membership___28=1 OR network_membership___37=1',
                'Pharmacogenomics' => 'network_membership___15=1 OR network_membership___28=1 OR network_membership___29=1',
                'Practice based research' => 'network_membership___2=1 OR network_membership___21=1 OR network_membership___25=1 OR network_membership___37=1',
                'Pulmonary/ respiratory diseases' => 'network_membership___0=1 OR network_membership___3=1 OR network_membership___4=1 OR network_membership___13=1',
                'Oncology' => 'network_membership___6=1 OR network_membership___7=1 OR network_membership___8=1 OR network_membership___9=1 OR network_membership___11=1 OR network_membership___19=1 OR network_membership___20=1 OR network_membership___26=1 OR network_membership___33=1 OR network_membership___34=1',
                'Radiology' => 'network_membership___1=1',
                'Rare Disease' => 'network_membership___30=1 OR network_membership___31=1',
                'Urology' => 'network_membership___36=1',
            )
        ),
        '274'=>array(
            'filters'=>array(
                'Argonne National Laboratory' => 'nonnihpartner_name___0=1',
                'Kaiser Permanente, Atlanta, GA' => 'nonnihpartner_name___1=1',
                'Lawrence Livermore National Laboratory' => 'nonnihpartner_name___2=1',
                'Los Alamos National Laboratory' => 'nonnihpartner_name___3=1',
                'National Emerging Infectious Diseases Laboratory' => 'nonnihpartner_name___4=1',
                'Oak Ridge National Laboratory' => 'nonnihpartner_name___5=1',
                'Sandia National Laboratories' => 'nonnihpartner_name___6=1',
            )
        ),
        '87'=>array(
            'filters'=>array(
                'Available on rolling basis' => 'pilotfunds_schedule___0=1',
                'Available on fixed dates' => 'pilotfunds_schedule___1=1',
                'Available on ad hoc basis' => 'pilotfunds_schedule___2=1',
                'Outcome tracking mechanisms' => 'pilotfunds_outcomes=1',
                'Maximum award value &ge; $75,000' => 'pilotfunds_maxvalue_no=1',
                'Minimum award value &le; $5,000' => 'pilotfunds_minvalue_no=1',
                'Total amount of annual funding &ge; $700,000' => 'pilotfunds_totalamount_no=1',
                'Total annual awards &ge; 15' => 'pilotfunds_totalnumber_no=1',
                'Faculty eligibility' => 'pilotfunds_eligibleparties___0=1',
                'CTSA member eligibility' => 'pilotfunds_eligibleparties___1=1',
                'Medical student eligibility' => 'pilotfunds_eligibleparties___2=1',
                'Undergraduate eligibility' => 'pilotfunds_eligibleparties___3=1',
                'Graduate student eligibility' => 'pilotfunds_eligibleparties___4=1',
                'Community organization eligibility' => 'pilotfunds_eligibleparties___5=1',
                'Standing review committee' => 'pilotfunds_peerreviewcomm=0',
                'Ad hoc review committee' => 'pilotfunds_peerreviewcomm=1',
                'Consultations for resubmission' => 'pilotfunds_consults=1',
                'CRU resources inlcuded in award' => 'pilotfunds_crc=0',
                'Accepts applications for any disease area' => 'pilotfunds_diseasefocus=0',
            )
        ),
      
    );
    $returnFilters = array();
    
    foreach($projectsArray as $pid => $project)
    {
        if(isset($filters[$pid]))
        {
            $returnFilters[$pid]['header'] = $project['title'];
            $returnFilters[$pid]['filters'] = array();
            foreach($filters[$pid]['filters'] as $checkBoxName => $where)
            {
                $returnFilters[$pid]['filters'][$checkBoxName] = $where;
            }
        }
            
    }
    
    if(!$ajax)
    {
        // need to get static counts for 1. all filters, 2. all filters that accept external projects
        foreach($_SESSION['WHERE'] as $pid => $where)
            $_SESSION['External_Projects_Only_WHERE'][$pid]=isset($filters[$pid]['filters']['External projects accepted']) ? $where." AND (".$filters[$pid]['filters']['External projects accepted'].")" : $where;
        
        $loop = array('site_count'=>$_SESSION['WHERE'],'external_only_site_count'=>$_SESSION['External_Projects_Only_WHERE']);
        
        foreach($loop as $key => $WHERE)
        {
            foreach($returnFilters as $pid => $filterAttributes)
            {
                $institution_field = $projectsArray[$pid]['siteid'];
                $table = "cataloging_$pid";

                # Get count for "Exists at site"
                $sql = "SELECT COUNT(DISTINCT $institution_field) as 'site_count'
                            FROM $table WHERE ".$WHERE[$pid];
    //                    print("<br>".$sql."<br>");
    //                $result = mysql_query($sql);
    //                if (!$result) {
    //                    die('<br>Invalid DISTINCT query: ' . mysql_error());
    //                } 
                    $result=  db_query($sql);
                    $fetchArray = $result->fetchAssoc();                
                    $returnFilters[$pid][$key]["Exists at site"] = $fetchArray['site_count'];


                foreach($filterAttributes['filters'] as $checkBoxName => $where)
                {
                    $siteCountWHERE = $WHERE[$pid]." AND (".$where.")";


                    $sql = "SELECT COUNT(DISTINCT $institution_field) as 'site_count'
                            FROM $table WHERE ".$siteCountWHERE;
//                    print("<br>".$sql);
//                    $result = mysql_query($sql);
//                    if (!$result) {
//                        die('<br>Invalid DISTINCT query: ' . mysql_error());
//                    } 
                    $result=  db_query($sql);

                    $fetchArray = $result->fetchAssoc();

                    $returnFilters[$pid][$key][$checkBoxName] = $fetchArray['site_count'];

                }
            }
        }
        
        
        
        
    }
    
    
    
    
    
    return $returnFilters;

}
function object_to_array($data)
{
    if (is_array($data) || is_object($data))
    {
        $result = array();
        foreach ($data as $key => $value)
        {
            $result[$key] = object_to_array($value);
        }
        return $result;
    }
    return $data;
}

/**
 * Takes an array of datapoints and returns an XML string suitable for an amMap (http://www.ammap.com/docs/v.2/data/structure)
 * 
 * @param array $data
 * @param string $marker 'circle' OR 'target'
 * @return string
 */
function cataloging_filtering_makemapxml($data, $marker) {
//    $ret_val = '<map map_file="maps/usa_mercator.swf" tl_long="-178.244751" tl_lat="71.455555" br_long="-66.936676" br_lat="18.96519" zoom="200%" zoom_x="-96%" zoom_y="-108%">
    $ret_val = '<map map_file="maps/usa_mercator.swf" tl_long="-178.244751" tl_lat="71.455555" br_long="-66.936676" br_lat="18.96519" zoom="250%" zoom_x="-120%" zoom_y="-128%">
    <areas>
    <!-- USA - States - Mercator Projection - Set projection in settings file -->
    <area mc_name="US_AL" title="Alabama"></area>
    <area mc_name="US_AK" title="Alaska"></area>
    <area mc_name="US_AZ" title="Arizona"></area>
    <area mc_name="US_AR" title="Arkansas"></area>
    <area mc_name="US_CA" title="California"></area>
    <area mc_name="US_CO" title="Colorado"></area>
    <area mc_name="US_CT" title="Connecticut"></area>
    <area mc_name="US_DE" title="Delaware"></area>
    <area mc_name="US_DC" title="District of Columbia"></area>
    <area mc_name="US_FL" title="Florida"></area>
    <area mc_name="US_GA" title="Georgia"></area>
    <area mc_name="US_HI" title="Hawaii"></area>
    <area mc_name="US_ID" title="Idaho"></area>
    <area mc_name="US_IL" title="Illinois"></area>
    <area mc_name="US_IN" title="Indiana"></area>
    <area mc_name="US_IA" title="Iowa"></area>
    <area mc_name="US_KS" title="Kansas"></area>
    <area mc_name="US_KY" title="Kentucky"></area>
    <area mc_name="US_LA" title="Louisiana"></area>
    <area mc_name="US_ME" title="Maine"></area>
    <area mc_name="US_MD" title="Maryland"></area>
    <area mc_name="US_MA" title="Massachusetts"></area>
    <area mc_name="US_MI" title="Michigan"></area>
    <area mc_name="US_MN" title="Minnesota"></area>
    <area mc_name="US_MS" title="Mississippi"></area>
    <area mc_name="US_MO" title="Missouri"></area>
    <area mc_name="US_MT" title="Montana"></area>
    <area mc_name="US_NE" title="Nebraska"></area>
    <area mc_name="US_NV" title="Nevada"></area>
    <area mc_name="US_NH" title="New Hampshire"></area>
    <area mc_name="US_NJ" title="New Jersey"></area>
    <area mc_name="US_NM" title="New Mexico"></area>
    <area mc_name="US_NY" title="New York"></area>
    <area mc_name="US_NC" title="North Carolina"></area>
    <area mc_name="US_ND" title="North Dakota"></area>
    <area mc_name="US_OH" title="Ohio"></area>
    <area mc_name="US_OK" title="Oklahoma"></area>
    <area mc_name="US_OR" title="Oregon"></area>
    <area mc_name="US_PA" title="Pennsylvania"></area>
    <area mc_name="US_RI" title="Rhode Island"></area>
    <area mc_name="US_SC" title="South Carolina"></area>
    <area mc_name="US_SD" title="South Dakota"></area>
    <area mc_name="US_TN" title="Tennessee"></area>
    <area mc_name="US_TX" title="Texas"></area>
    <area mc_name="US_UT" title="Utah"></area>
    <area mc_name="US_VT" title="Vermont"></area>
    <area mc_name="US_VA" title="Virginia"></area>
    <area mc_name="US_WA" title="Washington"></area>
    <area mc_name="US_WV" title="West Virginia"></area>
    <area mc_name="US_WI" title="Wisconsin"></area>
    <area mc_name="US_WY" title="Wyoming"></area>
    <area mc_name="borders" color="#FFFFFF" balloon="false"></area>
    </areas>
    <movies>';

    // Each $data point should look similar to:
    // array(7) { 
    //    ["title"]=> string(66) "University of New Mexico Clinical and Translational Science Center" 
    //    ["lat"]=> string(8) "35.08763" 
    //    ["long"]=> string(10) "-106.61799" 
    //    ["count"]=> string(1) "1"
    // }
//    print_r($data);

    // Finally write values. Only include values that have a count >0.
    foreach($data as $point) {
        if($point['count'] != 0) {
            $color = '434748';
            $alpha = '100';
            $ret_val .= '<movie file="' . $marker . '" color="' . $color . '" color_hover="9d1b32" title="' . $point['title'] . '" lat="' . $point['lat'] . '" long="' . $point['long'] . '" width="8" height="8" description="' . $point['description'] . '" value="'.$point['count'].'" fixed_size="true" url="http://google.com"></movie>' . "\n";
        }
    
    }

    $ret_val .= '</movies></map>';
   
    
    $wd = getcwd();
    
    
    
    $myFile = "$wd/sites/all/modules/ctsa/cataloging/js/ammap/ammap_data_filtering.xml";
    $fh = fopen($myFile,'w');
    fwrite($fh, trim($ret_val));
    fclose($fh);
    
    return str_replace(array("\n", "\r"), '', trim($ret_val));
}



